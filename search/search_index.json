{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About Powercalc","text":"<p>Powercalc is a custom component for Home Assistant to estimate the power consumption (as virtual meters) of lights, fans, smart speakers and other devices, which don't have a built-in power meter. The consumption of light entities is calculated using different strategies to estimate the power usage by looking at brightness, hue/saturation and color temperature. For other entities a generic calculation can be applied, based on the attributes relevant for that entity.</p> <p>Follow Quick start for the initial installation / setup</p> <p> Github project</p> <p> Profile library</p> <p></p>"},{"location":"quick-start/","title":"Quick Start","text":""},{"location":"quick-start/#installation","title":"Installation","text":"<p>You could either install with HACS (recommended) or manual.</p> HACS (recommended)Manual <p>This integration is part of the default HACS_ repository. Just click <code>Explore and add repository</code> and search for <code>powercalc</code> to install, or use this link to go directly there:</p> <p></p> <p>Copy <code>custom_components/powercalc</code> into your Home Assistant <code>config</code> directory.</p> <p>Post installation steps</p> <ol> <li> <p>Add the following entry to <code>configuration.yaml</code>:</p> <pre><code>powercalc:\n</code></pre> </li> <li> <p>Restart HA</p> </li> </ol>"},{"location":"quick-start/#set-up-power-sensors","title":"Set up power sensors","text":"<p>Powercalc has a built-in library of more than 400 power profiles. Currently, this exists mostly of lights. These profiles have been measured and provided by users. See supported models for the listing of supported devices.</p> <p>Powercalc scans your HA instance for entities which are supported for automatic configuration. It does that based on the manufacturer and model information known in HA. After following the installation steps above and restarting HA power (W) and energy sensors (kWh) should appear and you can add them to your installation by clicking <code>CONFIGURE</code>, as displayed in the screenshot below</p> <p></p> <p>When this is not the case please check the logs for any errors, you can also enable Debug logging to get more details about the discovery routine.</p> <p>When your appliance is not supported out of the box (or you want to have more control) you have extensive options for manual configuration. Please proceed to Sensor types for further instructions.</p> <p>Tip</p> <p>When you don't want powercalc to automatically discover sensors in your installation you can disable that behaviour to get full manual control:</p> <pre><code>powercalc:\n    enable_autodiscovery: false\n</code></pre> <p>Refer to global configuration for all settings you can do on global level.</p>"},{"location":"quick-start/#energy-dashboard","title":"Energy dashboard","text":"<p>If you want to use the virtual power sensors in the energy dashboard you'll need an energy sensor. Powercalc automatically creates one for every virtual power sensor. No need for any custom configuration. These energy sensors then can be selected in the energy dashboard under <code>Invididual devices</code>.</p> <p>You can disable the automatic creation of energy sensors with the option <code>create_energy_sensors</code> in your configuration (see global configuration).</p> <p>Note</p> <p>It can take some time for the energy sensors to appear in the energy dashboard, sometimes more than an hour. Just have a little patience ;-)</p>"},{"location":"actions/activate-playbook/","title":"Activate Playbook","text":"<p>This service is used to start executing a playbook. It only works with virtual power sensors having the playbook strategy configured.</p>"},{"location":"actions/activate-playbook/#example","title":"Example","text":"<pre><code>action: powercalc.activate_playbook\ndata:\n  playbook_id: program1\ntarget:\n  entity_id: sensor.waching_machine_power\n</code></pre>"},{"location":"actions/calibrate-energy/","title":"Calibrate Energy","text":"<p>Use this action to set an energy sensor to a forced new value. This can be useful if somehow the energy sensor has an erroneous value.</p> <p>Note</p> <p>Groups which this energy sensor is part of will also be increased with the new value.</p>"},{"location":"actions/calibrate-energy/#example","title":"Example","text":"<pre><code>action: powercalc.calibrate_energy\ndata:\n  value: \"20\"\ntarget:\n    entity_id: sensor.washing_machine_energy\n</code></pre>"},{"location":"actions/calibrate-utility-meter/","title":"Calibrate Utility Meter","text":"<p>Use this action to set a utility meter to a forced new value.</p>"},{"location":"actions/calibrate-utility-meter/#example","title":"Example","text":"<pre><code>action: powercalc.calibrate_utility_meter\ndata:\n  value: \"20\"\ntarget:\n    entity_id: sensor.washing_machine_energy_yearly\n</code></pre>"},{"location":"actions/change-gui-configuration/","title":"Change GUI Configuration","text":"<p>To change the configuration options for all Powercalc GUI config entries at once you can utilize the action <code>powercalc.change_gui_config</code>. You can use it to change the configuration for the following options</p> <ul> <li>create_energy_sensor</li> <li>create_utility_meters</li> <li>ignore_unavailable_state</li> <li>energy_integration_method</li> </ul> <p>You can call this action from the GUI (<code>Developer tools</code> -&gt; <code>Actions</code>). For example to set <code>create_utility_meters</code> to yes for all powercalc GUI configurations:</p>"},{"location":"actions/change-gui-configuration/#example","title":"Example","text":"<pre><code>action: powercalc.change_gui_config\ndata:\n  field: create_utility_meters\n  value: 1\n</code></pre>"},{"location":"actions/get-group-entities/","title":"Get Group Entities","text":"<p>Use this action to retrieve all the member entity IDs of a group entity.</p>"},{"location":"actions/get-group-entities/#example","title":"Example","text":"<pre><code>action: powercalc.get_group_entities\ntarget:\n  entity_id: sensor.my_group_power\ndata: {}\n</code></pre> <p>Example response:</p> <pre><code>sensor.tracked_power:\n  entities:\n    - sensor.kitchen_light_power\n    - sensor.furnace_power\n    - sensor.magic_power\n</code></pre>"},{"location":"actions/increase-daily-energy/","title":"Increase daily energy","text":"<p>To increase the sensor with a given value use the <code>powercalc.increase_daily_energy</code> action.</p> <p>Tip</p> <p>This can be useful in automations where you want to increase the energy sensor when a certain event occurs (using triggers). For example use a NFC tag to register a dishwasher cycle and increase the sensor with the known kWh for one cycle. Or measure the kWh once for certain programs of your smart washing machine, and use the program states in automation to increase the energy sensor.</p>"},{"location":"actions/increase-daily-energy/#example","title":"Example","text":"<pre><code>action: powercalc.increase_daily_energy\ndata:\n  value: 100\ntarget:\n  entity_id: sensor.my_energy\n</code></pre> <p>This will increase the energy sensor with 100 Kwh or 100 W when you have set <code>unit_of_measurement</code> to <code>W</code></p>"},{"location":"actions/reload/","title":"Reload","text":"<p>Powercalc provided a reload action which can be used to reload sensors when you modify the YAML configuration. This action is useful when you want to reload the sensors without restarting the HA instance.</p> <p>This action can also be called from <code>Developer Tools</code> -&gt; <code>YAML</code> section. When HA provides a list of integrations which support YAML reloading, you can find the <code>powercalc</code> integration in the list.</p>"},{"location":"actions/reload/#example","title":"Example","text":"<pre><code>action: powercalc.reload\ndata: {}\n</code></pre>"},{"location":"actions/reload/#working","title":"Working","text":"<p>When triggering this action Powercalc will do the following:</p> <ul> <li>Reload the YAML configuration.</li> <li>Update the global configuration.</li> <li>Reinitialize the sensors with the new configuration.</li> <li>Reload all Powercalc config entries (GUI configuration)</li> </ul>"},{"location":"actions/reset-energy/","title":"Reset Energy","text":"<p>Reset an energy sensor to 0 kWh</p>"},{"location":"actions/reset-energy/#example","title":"Example","text":"<pre><code>action: powercalc.reset_energy\ntarget:\n  entity_id: sensor.washing_machine_energy\n</code></pre>"},{"location":"actions/stop-playbook/","title":"Stop Playbook","text":"<p>This service is used to stop a running playbook. It only works with virtual power sensors having the playbook strategy configured.</p>"},{"location":"actions/stop-playbook/#example","title":"Example","text":"<pre><code>action: powercalc.stop_playbook\ndata:\n  playbook_id: program1\ntarget:\n  entity_id: sensor.waching_machine_power\n</code></pre>"},{"location":"actions/switch-sub-profile/","title":"Switch Sub Profile","text":"<p>Switch the sub profile for a given entity while HA is running. This is only applicable for sensors which have multiple sub profiles.</p>"},{"location":"actions/switch-sub-profile/#example","title":"Example","text":"<pre><code>action: powercalc.switch_sub_profile\ndata:\n  profile: length_5\ntarget:\n  entity_id: sensor.my_light_power\n</code></pre>"},{"location":"actions/update-library/","title":"Update Library","text":"<p>Checks powercalc library for updates and updates the library. Additionally starts discovery of new profiles.</p>"},{"location":"actions/update-library/#example","title":"Example","text":"<pre><code>action: powercalc.update_library\ndata: {}\n</code></pre>"},{"location":"community/tutorials/","title":"Tutorials","text":"<p>Some Powercalc users made some video tutorials or blog post to explain Powercalc setup and usage. Here we keep a listing of available resources which might help getting started.</p> <p>Note</p> <p>Some resources may be a bit older and reference to features which are obsolete or don't use new features of Powercalc.</p>"},{"location":"community/tutorials/#youtube","title":"Youtube","text":""},{"location":"community/tutorials/#english","title":"English:","text":""},{"location":"community/tutorials/#german","title":"German:","text":""},{"location":"community/tutorials/#french","title":"French:","text":""},{"location":"community/tutorials/#spanish","title":"Spanish:","text":""},{"location":"community/tutorials/#blog-posts","title":"Blog posts","text":"<ul> <li>https://www.twoenter.nl/blog/home-assistant-nl/powercalc-inzicht-energieverbruik-home-assistant/ (Dutch)</li> <li>https://seanblanchfield.com/2022/02/virtual-energy-meters-with-powercalc (English)</li> <li>https://roenning.net/?p=654 (English)</li> <li>https://www.teknikihemmet.se/2022/04/energiforbrukning-pa-smarta-lampor/ (Swedish)</li> <li>https://indomus.it/progetti/stimare-assorbimenti-e-consumi-elettrici-sulla-domotica-home-assistant-con-powercalc/ (Italian)</li> </ul> <p>Note</p> <p>Did you also make a Youtube video or textual tutorial please let me in discussions section and I'll happily include it here.</p>"},{"location":"configuration/global-configuration/","title":"Global configuration","text":"<p>Powercalc offers configuration options that can be set globally. These global settings will apply to all sensors created with Powercalc. However, if you configure settings for an individual sensor, those specific settings will take precedence over the global configuration for that sensor.</p> <p>Note</p> <p>Sensors created with the GUI do have a configuration set for <code>create_energy_sensors</code>, <code>create_utility_meters</code>, <code>ignore_unavailable_state</code> and <code>energy_integration_method</code>, changing global configuration will not affect the existing GUI configuration entries, to make it easy to change all of them Powercalc provides an action <code>powercalc.change_gui_config</code>. Refer to Change GUI configuration action.</p> <p>Global configuration can be defined both in <code>configuration.yaml</code> and in the GUI.</p>"},{"location":"configuration/global-configuration/#gui-configuration","title":"GUI configuration","text":"<p>Click the button to go to the Powercalc configuration flow:</p> <p></p> <p>Select <code>Global configuration</code> and follow the instructions.</p> <p>When you'd like the change the configuration later, go to the Powercalc integration page, find the <code>Global configuration</code> entry and click on <code>Configure</code>.</p> <p></p>"},{"location":"configuration/global-configuration/#yaml-configuration","title":"YAML configuration","text":"<p>You can add the options to <code>configuration.yaml</code> under the <code>powercalc:</code> property, like so:</p> <pre><code>powercalc:\n  force_update_frequency: 00:01:00 #Each minute\n  power_sensor_naming: \"{} Powersensor\"\n  create_energy_sensors: false\n</code></pre>"},{"location":"configuration/global-configuration/#configuration-options","title":"Configuration options","text":"<p>All the possible options are listed below.</p> Name Type Requirement Default Description create_domain_groups list Optional Create grouped power sensor aggregating all powercalc sensors of given domains, see domain group create_energy_sensors boolean Optional true Let the component automatically create energy sensors (kWh) for every power sensor create_utility_meters boolean Optional false Set to <code>true</code> to automatically create utility meters of your energy sensors. See utility meter disable_extended_attributes boolean Optional false Set to <code>true</code> to disable all extra attributes powercalc adds to the power, energy and group entity states. This will help keep the database size small especially when you have a lot of powercalc sensors and frequent update ratio disable_library_download boolean Optional false Set to <code>true</code> to disable the Powercalc library download feature, see library discovery_exclude_device_types list Optional Exclude device_types from the discovery process. enable_autodiscovery boolean Optional true Whether you want powercalc to automatically setup power sensors for supported models in your HA instance. energy_sensor_naming string Optional {} energy Change the name of the sensors. Use the <code>{}</code> placeholder for the entity name of your appliance. This will also change the entity_id of your sensor energy_sensor_friendly_naming string Optional Change the friendly name of the sensors, Use <code>{}</code> placehorder for the original entity name. energy_sensor_category string Optional Category for the created energy sensors. See HA docs. energy_integration_method string Optional trapezoid Integration method for the energy sensor. See HA docs energy_sensor_precision numeric Optional 4 Number of decimals you want for the energy sensors. See HA docs energy_sensor_unit_prefix string Optional Unit prefix for the energy sensor. See HA docs. Set to <code>none</code> for to create a Wh sensor force_update_frequency string Optional 00:10:00 Interval at which the sensor state is updated, even when the power value stays the same. Format HH:MM:SS group_update_interval numeric Optional 60 Throttle state changes of group energy sensor to only once every x seconds. 0 is disabled ignore_unavailable_state boolean Optional false Set to <code>true</code> when you want the power sensor to display a value (0 or <code>standby_power</code>) regardless of whether the source entity is available. power_sensor_naming string Optional {} power Change the name of the sensors. Use the <code>{}</code> placeholder for the entity name of your appliance. This will also change the entity_id of your sensor power_sensor_friendly_naming string Optional Change the friendly name of the sensors, Use <code>{}</code> placehorder for the original entity name. power_sensor_category string Optional Category for the created power sensors. See HA docs. utility_meter_net_consumption boolean Optional false Enable this if you would like to treat the source as a net meter. This will allow your counter to go both positive and negative. See utility_net_consumption utility_meter_offset string Optional 00:00:00 Offset for the utility meters. Format HH:MM:SS. See utility_offset utility_meter_types list Optional daily, weekly, monthly Define which cycles you want to create utility meters for. See utility_cycle utility_meter_tariffs list Optional Define different tariffs. See utility_tariffs. include_non_powercalc_sensors boolean Optional true Control whether you want to include non powercalc sensors in groups. See include entities"},{"location":"configuration/global-configuration/#change-gui-configuration-action","title":"Change GUI configuration action","text":"<p>To change the configuration options for all Powercalc GUI config entries at once you can utilize the action <code>powercalc.change_gui_config</code>. See Change GUI Configuration for more information.</p>"},{"location":"configuration/multiply-factor/","title":"Multiply Factor","text":"<p>This feature allows you to multiply the calculated power.</p> <p>This can be useful in the following use cases:</p> <ul> <li>You have a bunch of similar lights which you control as a group and want a single power sensor.</li> <li>You are using a LED strip from the LUT models, but you have extended or shortened it.</li> </ul> <p>Let's assume you have a combination of 4 GU10 spots in your ceiling in a light group <code>light.livingroom_spots</code></p> <pre><code>powercalc:\n  sensors:\n    - entity_id: light.livingroom_spots\n      multiply_factor: 4\n</code></pre> <p>This will add the power sensor <code>sensor.livingroom_spots_power</code> and the measured power will be multiplied by 4, as the original measurements are for 1 spot.</p> <p>By default the multiply factor will NOT be applied to the standby power, you can set the <code>multiply_factor_standby</code> to do this.</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: light.livingroom_spots\n      multiply_factor: 4\n      multiply_factor_standby: true\n</code></pre> <p>Tip</p> <p>A <code>multiply_factor</code> lower than 1 will decrease the power. For example 0.5 will half the power.</p>"},{"location":"configuration/new-yaml-structure/","title":"New YAML structure","text":"<p>In Powercalc 1.8.0 the structure of YAML has been changed. This has been done to stay in line with other HA components and ensure Powercalc keeps working correctly in the future. The old configuration format will stay working for some time, but I'll remove support in the future. So it's recommended to adopt your configuration. It's a small change.</p> <p>Old configuration:</p> <pre><code>sensor:\n  - platform: powercalc\n    entity_id: light.some_light\n    fixed:\n      power: 50\n  - platform: powercalc\n    entity_id: light.other_light\n    fixed:\n      power: 80\n</code></pre> <p>New configuration. Everything should move under the <code>powercalc-&gt;sensors</code> key, and <code>platform</code> needs to be removed.</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: light.some_light\n      fixed:\n        power: 50\n    - entity_id: light.other_light\n      fixed:\n        power: 80\n</code></pre> <p>Note</p> <p>You probably already have a <code>powercalc:</code> entry in your configuration for global powercalc configuration. You'll need to add <code>sensors</code> under that to prevent duplicating the <code>powercalc:</code> key. When you use https://www.home-assistant.io/docs/configuration/packages/ you can of course have powercalc sensor definitions scattered accross multiple files.</p>"},{"location":"configuration/sensor-configuration/","title":"Sensor configuration","text":"<p>For each entity you want to create a virtual power sensor for you'll need to add an entry in <code>configuration.yaml</code> or use the GUI config flow. Below you'll find a listing of possible configuration parameters for each sensor. Not all configuration params listed below are available in the GUI, when you want to use the \"advanced\" options you need to use YAML configuration.</p> <p>Note</p> <p>When you define an option per sensor it will override any global configuration option</p> Name Type Requirement Description GUI calculation_enabled_condition template Optional The configured power calculation strategy will only be executed when this template results in True, otherwise the power sensor will display 0 create_energy_sensor boolean Optional Set to disable/enable energy sensor creation. When set this will override global setting <code>create_energy_sensors</code> create_group string Optional This setting is only applicable when you also use <code>entities</code> setting or <code>include</code>. Define a group name here. See [group(/sensor-types/group.md) create_utility_meters boolean Optional Set to disable/enable utility meter creation. When set this will override global setting <code>create_utility_meters</code>. See utility meter custom_model_directory string Optional Directory for a custom light model. Relative from the <code>config</code> directory disable_standby_power boolean Optional Set to <code>true</code> to not show any power consumption when the device is standby energy_integration_method string Optional Integration method for the energy sensor. See HA docs energy_sensor_category string Optional Category for the created energy sensor. See HA docs. energy_sensor_naming string Optional Change the name (and id) of the sensors. Use the <code>{}</code> placeholder for the entity name of your appliance. When set this will override global setting <code>energy_sensor_naming</code>. Also see naming. energy_sensor_id string Optional Entity id of an existing energy sensor. Mostly used in conjunction with <code>power_sensor_id</code>. energy_sensor_unit_prefix string Optional Unit prefix for the energy sensor. See HA docs. Set to <code>none</code> for to create a Wh sensor entities list Optional Makes it possible to add multiple entities at once in one powercalc entry. Also enable possibility to create group sensors automatically. See group entity_id string Required HA entity ID. The id of the device you want your power sensor for fixed object Optional Fixed strategy options force_calculate_group_energy boolean Optional Set this to <code>true</code> when you want to create a Riemann sum sensor for powercalc group. By default the group energy sensor sums all individual energy sensors from member entities. force_energy_sensor_creation boolean Optional Set this to <code>true</code> when you want a new energy sensor to be created for the power sensor with <code>power_sensor_id</code>, even if the device already has an energy sensor entity of its own. hide_members boolean Optional Hide all group members in HA GUI, only applicable when <code>create_group</code> is also defined. ignore_unavailable_state boolean Optional Set this to <code>true</code> when you want the power sensor to display a value (<code>unavailable_power</code>, <code>standby_power</code> or 0) regardless of whether the source entity is available. The can be useful for example on a TV which state can become unavailable when it is set to off. include object Optional Use this in combination with <code>create_group</code> to automatically include entities from a certain area, group or template. See include entities linear object Optional Linear strategy options manufacturer string Optional Manufacturer, most of the time this can be automatically discovered mode string Optional Calculation mode, one of <code>lut</code>, <code>linear</code>, <code>fixed</code>. The default mode is <code>lut</code> model string Optional Model id, most of the time this can be automatically discovered multiply_factor float Optional Multiplies the calculated power by this number. See<code>multiply-factor</code> multiply_factor_standby boolean Optional When set to <code>true</code> the <code>multiply_factor</code> will also be applied to the standby power name string Optional Override the name power_sensor_category string Optional Category for the created power sensor. See HA docs. power_sensor_id string Optional Entity id of an existing power sensor. This can be used to let powercalc create energy sensors and utility meters. This will create no virtual power sensor. power_sensor_naming string Optional Change the name (and id) of the sensors. Use the <code>{}</code> placeholder for the entity name of your appliance. When set this will override global setting <code>power_sensor_naming</code>. Also see naming. sleep_power object Optional Changes the power to some value x seconds after the device has turned off. See standby power. standby_power float Optional Supply the wattage when the device is off. See standby power. Can also be a template unavailable_power float Optional Supply the wattage when the device has <code>unavailable</code> state. When not specified <code>standby_power</code> will be used, or 0. utility_meter_net_consumption boolean Optional Enable this if you would like to treat the source as a net meter. This will allow your counter to go both positive and negative. See utility_net_consumption. utility_meter_offset string Optional Define the offset for utility meters. See utility_offset. utility_meter_tariffs list Optional Define different tariffs. See utility_tariffs. utility_meter_types list Optional Define which cycles you want to create utility meters for. See utility_cycle. This will override global setting <code>utility_meter_types</code> unique_id string Optional Powercalc tries to get a unique_id from the source entity by default. When the source entity does not have a unique_id you can configure one yourself. This allows you to change the name, area etc from the GUI. You can use for example https://www.uuidgenerator.net/ to generate a unique one wled object Optional WLED strategy options"},{"location":"configuration/standby-power/","title":"Standby power","text":"<p>When you defined a virtual power sensor and the referenced entity is OFF, Powercalc will consider the appliance standby and use the <code>standby_power</code> option to determine it's power. The following states are considered off for powercalc:</p> <ul> <li>off</li> <li>not_home</li> <li>standby</li> <li>unavailable</li> </ul> <p>Given the following example:</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: light.some_light\n      fixed:\n        power: 50\n      standby_power: 2\n</code></pre> <p>When the light is <code>ON</code> power will be 50, when the light is <code>OFF</code> power will be 2.</p> <p>Passing templates as the <code>standby_power</code> value is also supported for entities created with YAML.</p>"},{"location":"configuration/standby-power/#sleep-power","title":"Sleep power","text":"<p>This setting comes in handy when a device enters a sleep mode after X amount of time which changes the power consumption.</p> <p>You'll need to define both <code>power</code> and <code>delay</code>.</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: media_player.smart_speaker\n      fixed:\n        power: 4\n      standby_power: 1\n      sleep_power:\n        power: 0.3\n        delay: 200\n</code></pre> <p>In the above scenario power will be 4 when the media player is on and/or actively playing. When the media player turns off the power will change to 1, then after 200 seconds the sleep mode will get activated and power will change to 0.3.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>There are several ways to contribute to Powercalc. You can help with the providing new measurements, development, documentation, translations, or by creating tutorials and videos. Every contribution is welcome! Please check the sections in the menu on the left for more information.</p>"},{"location":"contributing/integration-development/","title":"Integration development","text":"<p>When you'd like to do development on the Powercalc integration, you can follow these steps to get started.</p> <p>Powercalc uses a TDD (Test Driven Development) approach. This means that you write tests before you write the code. This ensures that the code is tested and regressions are prevented. You can also write the tests after the code, but it's a requirement to have tests for the code you write before it can be merged into the main branch. So it's highly recommended to use the tests to verify your changes. See the Running the tests section for more information.</p>"},{"location":"contributing/integration-development/#setting-up-the-development-environment","title":"Setting up the development environment","text":"<ol> <li>Setup a development environment for Home Assistant Core. Follow the instructions on the Home Assistant Developer Documentation.</li> <li> <p>Fork and clone the Powercalc repository:</p> <pre><code>git clone https://github.com/YOUR_GIT_USERNAME/homeassistant-powercalc\ncd homeassistant-powercalc\ngit remote add upstream https://github.com/bramstroker/homeassistant-powercalc.git\n</code></pre> </li> <li> <p>Copy or symlink the <code>custom_components/powercalc</code> directory to your Home Assistant configuration directory:</p> <pre><code>ln -s $(pwd)/custom_components/powercalc /path/to/your/homeassistant/config/custom_components/powercalc\n</code></pre> </li> <li> <p>Start Home Assistant Core in development mode:</p> <pre><code>hass -c /path/to/your/homeassistant/config --dev\n</code></pre> </li> </ol>"},{"location":"contributing/integration-development/#running-the-tests","title":"Running the tests","text":"<p>In order to run the tests, you need to install the dependencies. You can do this by running the following command:</p> <pre><code>poetry env use 3.13\ntests/setup.sh\npoetry install --no-root\n</code></pre> <p>After the dependencies are installed, you can run the tests by executing the following command:</p> <pre><code>poetry run pytest tests/\n</code></pre> <p>We strive at 100% test coverage, so please make sure to write tests for your code. To check coverage you can run:</p> <pre><code>poetry run pytest --cov custom_components.powercalc --cov-report xml:cov.xml --cov-report html tests/\n</code></pre> <p>This will generate a coverage report in the <code>htmlcov</code> directory.</p>"},{"location":"contributing/measure-ocr/","title":"Measure using OCR","text":"<p>Below you'll find instructions how to use the OCR method.</p>"},{"location":"contributing/measure-ocr/#installation","title":"Installation","text":"<ul> <li>Install tesseract for your OS. https://tesseract-ocr.github.io/tessdoc/Installation.html</li> <li>Install Python 3.10 and the requirements for the measure utilility see https://github.com/bramstroker/homeassistant-powercalc/blob/master/utils/measure/README.md#native</li> </ul>"},{"location":"contributing/measure-ocr/#running-the-ocr-stream","title":"Running the OCR stream","text":"<p>From the utils/measure directory in a command line:</p> <pre><code>python ocr/main.py -t '{tesseract_binary}'\n</code></pre> <p>Where tesseract_binary is the location of the tesseract executable On my machine:</p> <pre><code>python ocr/main.py -t '/opt/homebrew/Cellar/tesseract/5.1.0/bin/tesseract'\n</code></pre>"},{"location":"contributing/measure-ocr/#running-the-measure-tool","title":"Running the measure tool","text":"<p>Set <code>POWER_METER</code> in the .env to <code>ocr</code>, and run as usual either native or with docker. See measure</p>"},{"location":"contributing/measure-ocr/#tested-power-meters","title":"Tested power meters","text":"<p>The OCR tool is tested with Zhurui PR10. Probably others could also work.</p>"},{"location":"contributing/measure/","title":"Measure","text":"<p>Warning</p> <p>Incorrect use of electrical and measuring devices carries a risk of electric shock (electrocution). It can cause serious injury or even death!</p>"},{"location":"contributing/measure/#preparation","title":"Preparation","text":"<p>To start measuring you'll need the following:</p> <ul> <li>A computer (running Windows, Linux, MacOSX).</li> <li>Supported smartplug which can accurately measure small currents (Shelly PM mini Gen3 recommended)</li> <li>A fixture in which you can fit your light and a power plug on the other end which you can connect to your smartplug.</li> <li>Install the measure script as described here: https://github.com/bramstroker/homeassistant-powercalc/blob/master/utils/measure/README.md</li> </ul>"},{"location":"contributing/measure/#taking-measurements","title":"Taking measurements","text":"<p>Important</p> <p>Devices must have a unique and specific model identification. Generic model identifiers, which could represent multiple different models, are not acceptable. A common example for this are lights identifying as Tuya TS0505B. This is important for accurate auto-discovery and integration. Devices that are rebranded or sold under different names on platforms like AliExpress may not be suitable for integration, as it's challenging to ensure they are the same across different users. These profiles are not acceptable to get included in Powercalc library, but you are free of course to use them in your own installation.</p> <p>The measure script will walk through different brightness and color settings and take measurements with your smart plug.</p> <p>Before you are going to take the actual measurements you have to select a <code>POWER_METER</code> and <code>LIGHT_CONTROLLER</code> by editing the <code>.env</code> file. You also need to set the credentials and information depending on which power meter and light controller you are using. When you want to use the OCR method see measure OCR.</p> <p>Next, you'll need to take note of the <code>supported_color_modes</code> of the light you are about to measure. You can find that in <code>Developer tools</code> -&gt; <code>States</code>. Search for your entity there and look at the attributes column. For each of the supported color modes you need to run the measure tool. When the <code>xy</code> is in the supported modes you'll need to choose <code>hs</code> in the measure tool, as this is just another representation of a color.</p> <p>Important</p> <p>Make sure you temporarily pause possible automations you have in HA for your lights, so the light won't be switched in the middle of measuring session.</p> <p>Now start the script to begin the measurement session:</p> <pre><code>docker run --pull=always --rm --name=measure --env-file=.env -v $(pwd)/export:/app/export -v $(pwd)/.persistent:/app/.persistent -it bramgerritsen/powercalc-measure:latest\n</code></pre> <p>The script will ask you a few questions and will start switching your light to all kind of different settings. Depending on the selected color mode and sleep settings this will take a while. This will take 1 hour to a few hours to complete. Time to take a cup of coffee.</p>"},{"location":"contributing/measure/#measure-smart-speakers","title":"Measure smart speakers","text":"<p>Version 1.2.0 of the measure script fully automates the measurement session for smart speakers. Just select <code>Smart speaker</code> in the first step of the wizard.</p>"},{"location":"contributing/measure/#prepare-finalize-the-files","title":"Prepare / finalize the files","text":"<p>When the script has finished you can find the actual files in <code>/utils/measure/export</code> directory.</p> <p>You can inspect the CSV files for correctness by checking for 0 values or large inconsistencies. When everything looks fine you can safely remove the CSV file (only keep the .csv.gz file) as this is not needed when submitting to the repository.</p> <p>Next create a manufacturer and model folders in data directory and copy the files there. See the other directories for examples how this is structured.</p>"},{"location":"contributing/measure/#submitting-your-work-with-a-pull-request","title":"Submitting your work with a Pull Request","text":"<p>To create a Pull Request (PR) on the Powercalc GitHub repository, follow these steps:</p> <ol> <li>Fork the repository by clicking on the \"Fork\" button on the top right of the repository page. This will create a copy of the repository under your own account.</li> <li>Next, upload the directory containing your changes to the profile_library directory of your forked repository. Make sure to keep the manufacturer/model folders intact.</li> <li>If you're familiar with Git, you can also use a Git client to make the changes to your local copy of the repository, commit the changes, and push them to your forked repository on GitHub.</li> <li>Once your changes have been uploaded to your forked repository, go to the original repository and click on the \"New Pull Request\" button. This will open a new page where you can review the changes and submit the PR for review.</li> <li>Once the PR is submitted, the repository maintainers will review your changes and may request additional changes or merge the PR into the main repository.</li> <li>You should also monitor the PR for any feedback and address them accordingly.</li> </ol>"},{"location":"contributing/measure/#common-problems","title":"Common Problems","text":""},{"location":"contributing/measure/#getting-lot-of-0-readings","title":"Getting lot of 0 readings","text":"<p>Some power sensors, such as Arlec PC191HA, PC287HA appear not able to sense small amounts of current/power.</p> <p>Sometimes, measuring multiple of the same light is required to get an accurate set of readings.</p> <p>To do this, use the group integration, ensure your lights are configured in an identical fashion.</p> <p>When this is also not working use one of the recommended smart plugs</p> <p>You could also use a dummy load. This is a device that consumes a fixed amount of power. This can be used to increase the power consumption of the light, so the power meter can measure it more accurately.</p>"},{"location":"contributing/measure/#tuya-power-plug-will-not-connect","title":"Tuya power plug will not connect","text":"<p>For Tuya measuring devices, disable or delete the plug from local tuya and reboot the plug as they only support 1 connection at a time.</p>"},{"location":"contributing/measure/#keyerror-apower-on-shelly-powermeter","title":"KeyError: 'apower' on shelly powermeter","text":"<p>Some smart plugs / power meters do not provide the expected endpoint for Powercalc measure util to retrieve the power consumption.</p> <p>Known devices which have this issues are: - Shelly EM Gen3 (S3EM-002CXCEU)</p> <p>For this device you can simply use the <code>hass</code> powermeter to do the measurements through Home Assistant.</p>"},{"location":"contributing/translating/","title":"Translating","text":"<p>You can help by adding missing translations when you are a native speaker. Or add a complete new language when there is no language file available.</p> <p>Powercalc uses Crowdin to make contributing easy.</p>"},{"location":"contributing/translating/#changing-or-adding-to-existing-language","title":"Changing or adding to existing language","text":"<p>First register and join the translation project.</p> <ul> <li>Go to https://crowdin.com</li> <li>When you don't have a crowdin account yet, create one.</li> <li>Go to the Crowdin project page: https://crowdin.com/project/powercalc</li> <li>Click <code>Join</code></li> </ul> <p>Next translate a string.</p> <ul> <li>Select the language you want to contribute to from the dashboard.</li> <li>Click <code>Translate All</code></li> <li>Find the string you want to edit, missing translation are marked red.</li> <li>Fill in or modify the translation and click <code>Save</code></li> <li>Rinse and repeat for other translations.</li> </ul> <p>You are done now.</p> <p>Note</p> <p>Powercalc will automatically pull in latest changes in translations every hour and create a Pull Request for that. After that is reviewed by a maintainer if will be included in the next release of Powercalc</p>"},{"location":"contributing/translating/#adding-new-language","title":"Adding new language","text":"<p>Create an issue on github requesting a new language. We will do the necessary work to add the new translation to the integration and Crowdin site.</p>"},{"location":"library/custom-fields/","title":"Custom fields","text":"<p>Sometimes there is a need to ask the user to provide some additional data for a profile. This can be done by adding custom fields to the profile configuration. During discovery flow, or when user adds from library their will be an additional step where the user can provide the custom fields.</p>"},{"location":"library/custom-fields/#adding-custom-fields","title":"Adding custom fields","text":"<p>You can add one or more custom fields to a profile by adding a <code>fields</code> section to the profile configuration.</p> <pre><code>{\n  \"fields\": {\n    \"switch_entity\": {\n      \"label\": \"Switch entity\",\n      \"description\": \"Select the switch entity for your device\",\n      \"selector\": {\n        \"entity\": {\n          \"domain\": \"switch\"\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>The key <code>switch_entity</code> is the key of the field. This can be referenced in the profile configuration using the <code>[[switch_entity]]</code> syntax. After setup Powercalc will replace this with the value the user provided.</p> <p><code>label</code> is the label of the field that will be shown to the user. <code>description</code> is optional and is shown to the user below the field. <code>selector</code> is the type of field. The configuration is similar to HA Blueprints.</p> <p>Note</p> <p>Not all selectors are tested. Some might not be supported. <code>number</code> and <code>entity</code> are tested and should work.</p>"},{"location":"library/custom-fields/#example-number-selector","title":"Example number selector","text":"<p>In the example below we have a profile that asks the user to provide a number. The profile then calculates the power usage based on the number provided.</p> <pre><code>{\n  \"calculation_strategy\": \"fixed\",\n  \"fields\": {\n    \"num_switches\": {\n      \"label\": \"Number of switches\",\n      \"description\": \"Enter some number\",\n      \"selector\": {\n        \"number\": {\n          \"min\": 0,\n          \"max\": 4,\n          \"step\": 1\n        }\n      }\n    }\n  },\n  \"fixed_config\": {\n    \"power\": \"{{ [[num_switches]] * 0.20 }}\"\n  }\n}\n</code></pre> <p>When the user provides the number <code>2</code>, the template will be <code>{{ 2 * 0.20 }}</code> which will result in <code>0.40</code>.</p>"},{"location":"library/custom-fields/#example-entity-selector","title":"Example entity selector","text":"<p>In the example below we have a profile that asks the user to select a binary sensor. The profile then calculates the power usage based on the state of the binary sensor.</p> <pre><code>{\n  \"calculation_strategy\": \"composite\",\n  \"fields\": {\n    \"some_entity\": {\n      \"label\": \"Some entity\",\n      \"description\": \"Select some entity\",\n      \"selector\": {\n        \"entity\": {\n          \"domain\": \"binary_sensor\"\n        }\n      }\n    }\n  },\n  \"composite_config\": [\n    {\n      \"condition\": {\n        \"condition\": \"state\",\n        \"entity_id\": \"[[some_entity]]\",\n        \"state\": \"on\"\n      },\n      \"fixed\": {\n        \"power\": 20\n      }\n    },\n    {\n      \"fixed\": {\n        \"power\": 10\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"library/discovery/","title":"Discovery","text":"<p>During startup, Powercalc will scan your Home Assistant installation for entities and devices that match the library profiles. Only entities which have a device attached will be considered for discovery. Device information can be viewed at the top left corner of the device page in the Home Assistant UI, or in <code>config/.storage/core.device_registry</code>.</p> <p>Each device in HA has the following properties:</p> <ul> <li>manufacturer</li> <li>model</li> <li>model_id (optional)</li> </ul> <p>This information is tried to match again the built-in library and your custom model directory. When a match in custom models is found, the built-in library loading is skipped.</p> <p>starting with the manufacturer. Both manufacturer name and aliases are matched. If a match is found, the model id is matched. Both the directory_name (model id) and additional aliases (from model.json) are matched.</p> <p>You can enable debug logging to debug the matching process.</p>"},{"location":"library/discovery/#excluding-device-types","title":"Excluding device types","text":"<p>You can exclude devices from being discovered by Powercalc by using the <code>exclude_device_types</code> option in the configuration. For example, to exclude power meters and smart switches, when you are not interested in keeping track of self-consumption of these devices:</p> <pre><code>powercalc:\n  exclude_device_types:\n    - power_meter\n    - smart_switch\n</code></pre> <p>You can also use the GUI for this global configuration, see Global Configuration.</p>"},{"location":"library/library/","title":"Profile library","text":"<p>Powercalc ships with a huge library of predefined power profiles for different devices. You can find the list of supported devices on the dedicated library viewer. This library will keep extending by the effort of community users.</p> <p>At startup Powercalc will scan your HA installation and tries to match if any of them are in the library, when found it will provide a discovery flow for you to setup. More info about the discovery process can be found here. You can also setup Powercalc sensors for a entity manually, see Virtual power library.</p> <p>Starting from version 1.12.0 all the power profiles are moved out of the component and are downloaded from the internet on demand. This way we can roll out updates to the library without the need to update the component. Also you only need to download the profiles you actually use, saving bandwidth and storage.</p> <p>Note</p> <p>The library is hosted on GitHub, so you need an internet connection to download the profiles. When you prefer to have full local control, you can disable the library in the configuration. See [Disable download feature].</p> <p>For more information about the library structure, See structure.</p> <p>To contribute new profiles see the measure section.</p> <p>More information about how to setup specific device types can be found in the device types section.</p>"},{"location":"library/library/#custom-models","title":"Custom models","text":"<p>If you have a device that is not in the library, you can create a custom model. When it can be useful to share this model with the community, please consider submitting it to the library.</p> <p>Custom models are stored in the <code>config/powercalc/profiles</code> directory.</p> <p>You'll need to apply the same structure as the core library, with a subdirectory for the manufacturer and model id.</p> <p>For example:</p> <pre><code>config/\n\u251c-powercalc/\n\u2502 \u2514-profiles/\n\u2502   \u251c-tp-link/\n\u2502   \u2502 \u251c\u2500HS100/\n\u2502   \u2502 \u2502 \u251c\u2500model.json\n\u2502   \u2502 \u2514\u2500...\n</code></pre> <p>Note</p> <p>Custom models are loaded before the built-in library models, so you can override the library models by creating a custom model with the same manufacturer and model id.</p>"},{"location":"library/library/#disable-download-feature","title":"Disable download feature","text":"<p>If you want to disable the download feature, you can set the use the <code>disable_library_download</code> option in the configuration.</p> <pre><code>powercalc:\n  disable_library_download: true\n</code></pre> <p>This will prevent the component from downloading the library profiles from the internet.</p> <p>You will have to manage the library profiles yourself, by downloading them from the GitHub repository and placing them in the <code>config/powercalc/profiles</code> directory.</p>"},{"location":"library/library/#updating-the-library","title":"Updating the library","text":"<p>The library is updated automatically in the background under the following conditions. Once the update process is complete, a discovery routine will be initiated to potentially discover new supported entities on your system.</p> <ul> <li>At Each Startup: The library checks for updates whenever the system is started.</li> <li>Every Two Hours: Updates are scheduled to run automatically every two hours.</li> <li>Manual Trigger: Updates can also be initiated manually by invoking the action <code>powecalc.update_library</code>.</li> </ul> <p>This ensures that you always have the latest power profiles available, without the need to restart HA.</p>"},{"location":"library/library/#force-redownload","title":"Force redownload","text":"<p>Powercalc keeps track of hashes per profile to determine if a profile has changed. The file which contains the hashes is located at <code>config/.storage/powercalc_profiles/.profile_hashes</code></p> <p>To force a redownload of all profiles, you can delete this file and restart HA or call the <code>powecalc.update_library</code> action.</p>"},{"location":"library/structure/","title":"Library structure","text":"<p>The library is structured in a multi level tree structure. The top level is the manufacturer, followed by the model id and optionally sub profiles. Manufacturer directory must hae a <code>manufacturer.json</code> file which contains the manufacturer name and optionally aliases. Each power profile has it's own subdirectory <code>{manufacturer}/{modelid}</code>. i.e. signify/LCT010, containing a <code>model.json</code> file and optionally CSV files for the LUT calculation strategy.</p>"},{"location":"library/structure/#modeljson","title":"model.json","text":"<p>Every profile MUST contain a <code>model.json</code> file which defines the supported calculation modes and other configuration. See the json schema how the file must be structured.</p> <p>Required fields are:</p> <ul> <li><code>name</code>: The name of the device (this is only used in the Library)</li> <li><code>device_type</code>: The type of the device. See the device types section for more information.</li> <li><code>calculation_strategy</code>: The calculation strategy to use. See the strategies section for more information.</li> <li><code>measure_method</code>: The method used to measure the device. This can be <code>manual</code> or <code>script</code>.</li> <li><code>measure_device</code>: The device used to measure the power usage. (For example <code>Shelly PM Gen 3</code>)</li> <li><code>created_at</code>: The date when the profile was created. (ISO 8601 format, i.e. <code>2023-06-19T08:02:31</code>)</li> <li><code>author</code>: The author of the profile.</li> </ul> <p>You can use <code>aliases</code> to define alternative model names, which will be used during discovery. This can be helpful when same model is reported differently depending on the integration. For example, the same light bulb could be reported differently by the Hue integration compared to the deCONZ integration.</p> <p>By default Powercalc discovers on a \"per entity\" basis. This can cause issues when a device has multiple entities, causing multiple discoveries for the same device. When a profile does not have to be bound to a specific entity (light, switch etc.), you can set <code>discovery_by</code> to <code>device</code>. This will cause Powercalc to discover on a \"per device\" basis, which is more reliable. This setting is recommended for device types which map to <code>sensor</code> domain entities, these are: <code>network</code>, <code>power_meter</code> and <code>generic_iot</code>.</p>"},{"location":"library/structure/#sub-profiles","title":"Sub profiles","text":"<p>Some profiles might have multiple profiles. This is useful when a device has different power consumption based on the state of the device. See sub profiles for more information.</p>"},{"location":"library/sub-profiles/","title":"Sub profiles","text":"<p>Some profiles might have multiple profiles. This is useful when a device has different power consumption based on the state of the device. This can be used for example for different infrared modes of a light. Or lights having different effects.</p> <p>Each sub profile has it's own subdirectory <code>{manufacturer}/{modelid}/{subprofile}</code>, which contains a <code>model.json</code> file. You can also define <code>sub_profile_select</code> in the main <code>model.json</code> to automatically select the sub profile based on the state of the device. When no <code>sub_profile_select</code> is defined, the user will be asked to select the sub profile during discovery or while setting up manually from library.</p> <p>Examples:</p> <ul> <li>lifx/LIFX A19 Night Vision</li> <li>eufy/T8400</li> </ul>"},{"location":"library/sub-profiles/#sub-profile-select","title":"Sub profile select","text":""},{"location":"library/sub-profiles/#entity-id","title":"Entity ID","text":"<pre><code>{\n    \"sub_profile_select\": {\n        \"matchers\": [\n            {\n                \"type\": \"entity_id\",\n                \"pattern\": \".*_nightlight$\",\n                \"profile\": \"nightlight\"\n            }\n        ],\n        \"default\": \"default\"\n    }\n}\n</code></pre>"},{"location":"library/sub-profiles/#entity-state","title":"Entity state","text":"<pre><code>{\n    \"sub_profile_select\": {\n        \"matchers\": [\n            {\n                \"type\": \"entity_state\",\n                \"entity_id\": \"select.{{source_object_id}}_infrared_brightness\",\n                \"map\": {\n                    \"Disabled\": \"infrared_off\",\n                    \"25%\": \"infrared_25\",\n                    \"50%\": \"infrared_50\",\n                    \"100%\": \"infrared_100\"\n                }\n            }\n        ],\n        \"default\": \"infrared_off\"\n    }\n}\n</code></pre>"},{"location":"library/sub-profiles/#attribute","title":"Attribute","text":"<pre><code>{\n    \"sub_profile_select\": {\n        \"matchers\": [\n            {\n                \"type\": \"attribute\",\n                \"entity_id\": \"select.{{source_object_id}}_infrared_brightness\",\n                \"map\": {\n                    \"effect1\": \"effect1\",\n                    \"effect2\": \"effect2\"\n                }\n            }\n        ],\n        \"default\": \"default\"\n    }\n}\n</code></pre>"},{"location":"library/sub-profiles/#integration","title":"Integration","text":"<pre><code>{\n    \"sub_profile_select\": {\n        \"matchers\": [\n            {\n                \"type\": \"integration\",\n                \"integration\": \"deconz\",\n                \"profile\": \"deconz\"\n            }\n        ],\n        \"default\": \"default\"\n    }\n}\n</code></pre>"},{"location":"library/device-types/","title":"Device types","text":"<p>Here you can find information about how to setup specific device types for the library.</p>"},{"location":"library/device-types/#camera","title":"Camera","text":""},{"location":"library/device-types/#cover","title":"Cover","text":""},{"location":"library/device-types/#generic-iot","title":"Generic IoT","text":""},{"location":"library/device-types/#light","title":"Light","text":""},{"location":"library/device-types/#power-meter","title":"Power meter","text":"<p>Smart power meter. Powercalc profiles can be used to define the self usage of the IoT device itself.</p>"},{"location":"library/device-types/#printer","title":"Printer","text":""},{"location":"library/device-types/#smart-dimmer","title":"Smart dimmer","text":"<p>Smart dimmers are devices that can control the brightness of a light. They are often used in combination with LED lights.</p>"},{"location":"library/device-types/#smart-switch","title":"Smart switch","text":"<p>Used for smart plugs / smart switches which can toggle a connected device on or off.</p>"},{"location":"library/device-types/#smart-speaker","title":"Smart Speaker","text":""},{"location":"library/device-types/#network","title":"Network","text":""},{"location":"library/device-types/#vacuum-robot","title":"Vacuum robot","text":""},{"location":"library/device-types/camera/","title":"Camera","text":"<p>IP camera, webcam, or other camera devices.</p>"},{"location":"library/device-types/camera/#json","title":"JSON","text":"<pre><code>{\n  \"device_type\": \"camera\",\n  \"calculation_strategy\": \"fixed\",\n  \"fixed_config\": {\n    \"power\": 2.5\n  }\n}\n</code></pre> <p>Note</p> <p>Required fields are omitted in this example for brevity. For the full list of required fields see the model structure</p>"},{"location":"library/device-types/camera/#measure","title":"Measure","text":"<p>You can use the measure tool average mode. Suggest to measure for 2 hours.</p>"},{"location":"library/device-types/cover/","title":"Cover","text":"<p>Blinds, awnings, shutters, curtains etc.</p>"},{"location":"library/device-types/cover/#json","title":"JSON","text":"<pre><code>{\n  \"standby_power\": 0.2,\n  \"standby_power_on\": 0.2,\n  \"device_type\": \"cover\",\n  \"calculation_strategy\": \"fixed\",\n  \"fixed_config\": {\n    \"states_power\": {\n      \"opening\": 150,\n      \"closing\": 150\n    }\n  }\n}\n</code></pre> <p>Note</p> <p>Required fields are omitted in this example for brevity. For the full list of required fields see the model structure</p> <p>This profile is for a cover device that uses 150W when opening or closing. The standby power is 0.2W.</p>"},{"location":"library/device-types/generic-iot/","title":"Generic iot","text":"<p>Generic IoT</p> <p>Generic IoT device. Powercalc profiles can be used to define the self usage of the IoT device itself.</p>"},{"location":"library/device-types/generic-iot/#json","title":"JSON","text":"<pre><code>{\n  \"standby_power\": 0.3,\n  \"sensor_config\": {\n    \"power_sensor_naming\": \"{} Device Power\",\n    \"energy_sensor_naming\": \"{} Device Energy\"\n  },\n  \"device_type\": \"generic_iot\",\n  \"calculation_strategy\": \"fixed\",\n  \"discovery_by\": \"device\",\n  \"only_self_usage\": true\n}\n</code></pre> <p>Note</p> <p>Required fields are omitted in this example for brevity. For the full list of required fields see the model structure</p> <p>Note</p> <p>The <code>discovery_by</code> field is set to <code>device</code> to prevent multiple discoveries for the same device.</p> <p>Following the example above the power for this device will always be 0.3W.</p>"},{"location":"library/device-types/light/","title":"Light","text":"<p>Lights are integrated by using the LUT (Look Up Table) strategy. This strategy is used to calculate the power consumption of the light based on the brightness / color levels.</p>"},{"location":"library/device-types/light/#json","title":"JSON","text":"<p>Example model.json:</p> <pre><code>{\n    \"standby_power\": 0.4,\n    \"calculation_strategy\": \"lut\"\n}\n</code></pre> <p>Note</p> <p>Required fields are omitted in this example for brevity. For the full list of required fields see the model structure</p>"},{"location":"library/device-types/light/#measure","title":"Measure","text":"<p>To generate a LUT you'll need to use the measure utility. This will fully automate the process and generate the required CSV files and model.json.</p>"},{"location":"library/device-types/light/#lut-data-files","title":"LUT data files","text":"<p>Depending on the supported color modes of the light the integration expects one or more CSV files. You can check the supported modes in HA Developer Tools.</p> <ul> <li>hs.csv.gz (hue/saturation, colored lamps)</li> <li>color_temp.csv.gz (color temperature)</li> <li>brightness.csv.gz (brightness only lights)</li> <li>effect.csv.gz (lights with predefined effect)</li> </ul> <p>Some lights support two color modes (both <code>hs</code> and <code>color_temp</code>), so there must be two CSV files. When your light supports <code>xy</code> color mode, you just need to provide the <code>hs</code> CSV file. When your light supports predefined <code>effect</code> mode, you should also include the <code>effect</code> CSV file.</p> <p>The files must be gzipped to keep the repository footprint small.</p> <p>Example directory structure:</p> <pre><code>- signify\n  - LCT010\n    - model.json\n    - hs.csv.gz\n    - color_temp.csv.gz\n    - effect.csv.gz\n</code></pre>"},{"location":"library/device-types/light/#expected-file-structure","title":"Expected file structure","text":"<ul> <li>The file MUST contain a header row.</li> <li>Watt value decimal point MUST be a <code>.</code> not a <code>,</code>. i.e. <code>18.4</code></li> <li>The data rows in the CSV files MUST have the following column order:</li> </ul> <p>hs.csv</p> <pre><code>bri,hue,sat,watt\n</code></pre> <p>color_temp.csv</p> <pre><code>bri,mired,watt\n</code></pre> <p>brightness.csv</p> <pre><code>bri,watt\n</code></pre> <p>effects.csv</p> <pre><code>effect,bri,watt\n</code></pre> <p>*Ranges*:</p> <ul> <li>brightness (0-255)</li> <li>hue (0-65535)</li> <li>saturation (0-255)</li> <li>mired (0-500)  min value depending on min mired value of the light model</li> </ul>"},{"location":"library/device-types/network/","title":"Network","text":"<p>Generic device type for network devices. Can be used for routers, switches, access points, etc.</p>"},{"location":"library/device-types/network/#json","title":"JSON","text":"<pre><code>{\n  \"device_type\": \"network\",\n  \"calculation_strategy\": \"fixed\",\n  \"fixed_config\": {\n    \"power\": 3.0\n  }\n}\n</code></pre> <p>Note</p> <p>Required fields are omitted in this example for brevity. For the full list of required fields see the model structure</p>"},{"location":"library/device-types/power-meter/","title":"Power meter","text":"<p>Smart power meter. Powercalc profiles can be used to define the self usage of the IoT device itself.</p>"},{"location":"library/device-types/power-meter/#json","title":"JSON","text":"<pre><code>{\n  \"standby_power\": 0.3,\n  \"sensor_config\": {\n    \"power_sensor_naming\": \"{} Device Power\",\n    \"energy_sensor_naming\": \"{} Device Energy\"\n  },\n  \"device_type\": \"power_meter\",\n  \"calculation_strategy\": \"fixed\",\n  \"discovery_by\": \"device\",\n  \"only_self_usage\": true\n}\n</code></pre> <p>Note</p> <p>Required fields are omitted in this example for brevity. For the full list of required fields see the model structure</p> <p>Following the example above the power for this device will always be 0.3W.</p>"},{"location":"library/device-types/printer/","title":"Printer","text":""},{"location":"library/device-types/printer/#json","title":"JSON","text":"<pre><code>{\n  \"calculation_strategy\": \"fixed\",\n  \"device_type\": \"printer\",\n  \"fixed_config\": {\n    \"states_power\": {\n      \"idle\": 1.52,\n      \"printing\": 12\n    }\n  }\n}\n</code></pre> <p>Note</p> <p>Required fields are omitted in this example for brevity. For the full list of required fields see the model structure</p>"},{"location":"library/device-types/smart-dimmer/","title":"Smart dimmer","text":"<p>Smart dimmers are devices that can control the brightness of a light. They are often used in combination with LED lights.</p>"},{"location":"library/device-types/smart-dimmer/#json","title":"JSON","text":"<p>Use the following model.json to configure a smart dimmer device type.</p>"},{"location":"library/device-types/smart-dimmer/#smart-dimmer-without-built-in-powermeter","title":"Smart dimmer without built-in powermeter","text":"<p>The profile will provide self-usage measurements for the smart dimmer itself, and will ask the user to provide the power consumption of the connected light.</p> <pre><code>{\n  \"standby_power\": 0.3,\n  \"standby_power_on\": 0.5,\n  \"device_type\": \"smart_dimmer\",\n  \"calculation_strategy\": \"linear\"\n}\n</code></pre> <p>Note</p> <p>Required fields are omitted in this example for brevity. For the full list of required fields see the model structure</p> <p>For smart dimmer devices the user can additionally supply linear configuration to define the power consumption of the connected light. When not supplied, the power consumption is assumed to be 0.5W when the light is on and 0.3W when the light is off.</p> <p>To do this in YAML use the following configuration:</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: light.some_light\n      manufacturer: xx # reference to the library manufacturer\n      model: xx # reference to the library model\n      linear:\n        min_power: 2\n        max_power: 20\n</code></pre> <p>When using GUI configuration flow (either discovery or manual), the user will be able to define the linear configuration for the light.</p>"},{"location":"library/device-types/smart-dimmer/#smart-dimmer-with-built-in-powermeter","title":"Smart dimmer with built-in powermeter","text":"<p>When the dimmer already has a built-in powermeter, the following configuration can be used:</p> <pre><code>{\n  \"standby_power\": 0.3,\n  \"sensor_config\": {\n    \"power_sensor_naming\": \"{} Device Power\",\n    \"energy_sensor_naming\": \"{} Device Energy\"\n  },\n  \"device_type\": \"smart_dimmer\",\n  \"calculation_strategy\": \"linear\",\n  \"only_self_usage\": true\n}\n</code></pre> <p>The <code>only_self_usage</code> flag is set to true to indicate that the power consumption of the connected light is already measured by the dimmer itself. In this scenario the user also won't be asked to provide the power consumption of the connected light during the configuration wizard.</p>"},{"location":"library/device-types/smart-speaker/","title":"Smart speaker","text":"<p>Smart speakers are devices that can play music, answer questions, and control smart home devices. They are often used in combination with voice assistants like Amazon Alexa, Google Assistant, or Apple Siri. Powercalc profiles define power usage per volume level, this will give a pretty accurate indication of the power usage of the device. However for speakers which have a high power output, the estimated power usage can be a bit off depending on the music played.</p>"},{"location":"library/device-types/smart-speaker/#json","title":"JSON","text":"<p>Example model.json</p> <pre><code>{\n  \"calculation_enabled_condition\": \"{{ is_state('[[entity]]', 'playing') }}\",\n  \"calculation_strategy\": \"linear\",\n  \"device_type\": \"smart_speaker\",\n  \"linear_config\": {\n    \"calibrate\": [\n      \"10 -&gt; 1.79\",\n      \"20 -&gt; 1.79\",\n      \"30 -&gt; 1.86\",\n      \"40 -&gt; 1.93\",\n      \"50 -&gt; 1.94\",\n      \"60 -&gt; 2.09\",\n      \"70 -&gt; 2.34\",\n      \"80 -&gt; 2.3\",\n      \"90 -&gt; 2.43\",\n      \"100 -&gt; 2.51\",\n      \"0 -&gt; 1.63\"\n    ]\n  },\n  \"standby_power\": 0.9\n}\n</code></pre> <p>Note</p> <p>Required fields are omitted in this example for brevity. For the full list of required fields see the model structure</p>"},{"location":"library/device-types/smart-speaker/#measure","title":"Measure","text":"<p>To integrate a smart speaker with Powercalc, the measure tool provides a mode to measure it's power consumption. It does that by playing pink noise at different volumes and measuring the power consumption.</p> <p>After starting the measure tool, select <code>Smart speaker</code> in the first step of the wizard.</p> <p>The process will take less than 5 minutes to complete.</p>"},{"location":"library/device-types/smart-switch/","title":"Smart switch","text":"<p>Used for smart plugs / smart switches which can toggle a connected device on or off.</p>"},{"location":"library/device-types/smart-switch/#json","title":"JSON","text":"<p>Below are different examples of how to configure a smart switch device in the library. Depending on the capabilities of the smart switch, select the appropriate configuration.</p>"},{"location":"library/device-types/smart-switch/#smart-switch-without-built-in-powermeter","title":"Smart switch without built-in powermeter","text":"<p>The profile will provide self-usage measurements for the smart switch itself, and will ask the user to provide the power consumption of the connected device.</p> <pre><code>{\n  \"standby_power\": 0.3,\n  \"standby_power_on\": 0.7,\n  \"device_type\": \"smart_switch\",\n  \"calculation_strategy\": \"fixed\"\n}\n</code></pre> <p>Note</p> <p>Required fields are omitted in this example for brevity. For the full list of required fields see the model structure</p> <p>When this profile is discovered, the user will be asked to provide the power consumption of the connected device. Assuming the user provides a value of 50W the following power values will be calculated: - ON: 50.7W - OFF: 0.3W</p> <p>Note</p> <p>During the configuration flow the user als has the option to toggle <code>self_usage_included</code> on or off. When toggled on the power when ON will be 50W instead of 50.7W, in the example above.</p>"},{"location":"library/device-types/smart-switch/#smart-switch-with-built-in-powermeter","title":"Smart switch with built-in powermeter","text":"<p>Note</p> <p>In this scenario Powercalc will only provide the self-usage measurements for the smart switch itself. As the smart switch itself already measures the connected appliance.</p> <p>Note the sensor_naming configuration which will make sure the entities are named different than the power entities already provided, so they don't conflict.</p> <pre><code>{\n  \"standby_power\": 0.3,\n  \"standby_power_on\": 0.7,\n  \"sensor_config\": {\n    \"power_sensor_naming\": \"{} Device Power\",\n    \"energy_sensor_naming\": \"{} Device Energy\"\n  },\n  \"device_type\": \"smart_switch\",\n  \"calculation_strategy\": \"fixed\",\n  \"only_self_usage\": true\n}\n</code></pre> <p>Following the example above, the following power values will be calculated: - ON: 0.7W - OFF: 0.3W</p>"},{"location":"library/device-types/smart-switch/#smart-switch-with-multiple-relays","title":"Smart switch with multiple relays","text":"<p>Some smart switches have multiple relays, each controlling a different device. To integrate this you can utilize the multi_switch calculation strategy.</p> <p>Examples of this type of smart switch are:</p> <ul> <li>TP-Link Kasa HS300</li> <li>Shelly 2.5</li> </ul> <pre><code>{\n  \"calculation_strategy\": \"multi_switch\",\n  \"discovery_by\": \"device\",\n  \"standby_power\": 0.25,\n  \"multi_switch_config\": {\n    \"power\": 0.8\n  },\n  \"sensor_config\": {\n    \"power_sensor_naming\": \"{} Device Power\",\n    \"energy_sensor_naming\": \"{} Device Energy\"\n  },\n  \"only_self_usage\": true\n}\n</code></pre> <p>This configuration will set the self usage of the switch to 0.25W, for each relay which is activated 0.8W will be added. So assuming switch with 4 relays, and 2 are activated the following power values will be calculated: 2 * 0.8 + 0.25 = 1.85W</p>"},{"location":"library/device-types/smart-switch/#measure","title":"Measure","text":"<p>Start by disconnecting the device from the smart switch, as we need to measure the power consumption of the smart switch itself, not the device it controls. Next, plug the smart switch into the power meter (smart plug) you will be using for the measurement.</p> <p>The ability to measure the smart switch's standby power depends on the smart plug you're using. Some plugs may not be able to measure very low values.</p> <p>The Zhurui PR10 smart plug is a good option, as it can measure power as low as 0.1W.</p> <p>Alternatively, you can try another smart plug, but you might need to add a dummy load to the smart switch to get an accurate measurement. When using a smart plug, you can use the measure tool and select the <code>average</code> mode for 1 minute to get a reading.</p> <p>Now, you\u2019re ready to measure the smart switch's power consumption in both the <code>ON</code> and <code>OFF</code> states.</p> <ul> <li>Turn the switch ON in HA</li> <li>Record the power reading</li> <li>Turn the switch OFF in HA</li> <li>Record the power reading</li> </ul> <p>Choose the appropriate example JSON for your situation and replace the values with the ones you've measured.</p>"},{"location":"misc/naming/","title":"Sensor Naming","text":"<p>This page described how entities are named by default in Powercalc and the options to change that behaviour.</p>"},{"location":"misc/naming/#default-naming-convention","title":"Default naming convention","text":"<p>Let's assume you have a source sensor <code>light.patio</code> with name \"Patio\". Powercalc will create the following sensors by default.</p> <ul> <li>sensor.patio_power (Patio power)</li> <li>sensor.patio_energy (Patio energy)</li> </ul> <p>Note</p> <p>Utility meters will use the energy name as a base and suffix with <code>_daily</code>, <code>_weekly</code>, <code>_monthly</code></p>"},{"location":"misc/naming/#change-suffixes","title":"Change suffixes","text":"<p>To change the default suffixes <code>_power</code> and <code>_energy</code> you can use the <code>power_sensor_naming</code> and <code>energy_sensor_naming</code> options. The following configuration:</p> <pre><code>powercalc:\n  energy_sensor_naming: \"{} kWh consumed\"\n</code></pre> <p>will create following sensors:</p> <ul> <li>sensor.patio_power (Patio power)</li> <li>sensor.patio_kwh_consumed (Patio kWh consumed)</li> </ul>"},{"location":"misc/naming/#friendly-naming","title":"Friendly naming","text":"<p>This option allows you to separately change only the name (shown in GUI), it will not have effect on the entity id</p> <pre><code>powercalc:\n  energy_sensor_naming: \"{} kwh\"\n  energy_sensor_friendly_naming: \"{} Energy consumed\n</code></pre> <p>will create following sensors:</p> <ul> <li>sensor.patio_kwh (Patio Energy consumed)</li> </ul>"},{"location":"misc/naming/#change-full-name","title":"Change full name","text":"<p>You can also change the base sensor name with the <code>name</code> option</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: light.patio\n      name: Patio Light\n</code></pre> <p>will create:</p> <ul> <li>sensor.patio_light_power (Patio light power)</li> <li>sensor.patio_light_energy (Patio light energy)</li> </ul>"},{"location":"sensor-types/","title":"Set up sensors","text":"<p>You can create new Powercalc sensor either with the GUI or YAML.</p> <p>In the GUI just click the button to directly add a powercalc sensor:</p> <p></p> <p>When this is not working.</p> <ul> <li>Go to <code>Settings</code> -&gt; <code>Devices &amp; Services</code></li> <li>Click <code>Add integration</code></li> <li>Search and click <code>Powercalc</code></li> </ul> <p>After initializing the flow for a new configuration you'll be presented a list with choices:</p> <p></p> <p>We will explain the options briefly here. To get more information go to the respective sections in the documentation.</p>"},{"location":"sensor-types/#virtual-power-manual","title":"Virtual power (manual)","text":"<p>Create a virtual power sensor by manual configuration. This is the main feature of Powercalc and the possibilities are endless.</p>"},{"location":"sensor-types/#virtual-power-library","title":"Virtual power (library)","text":"<p>Create a virtual power sensor by selecting from the library of power profiles. See supported models.</p>"},{"location":"sensor-types/#group","title":"Group","text":"<p>Make a group of different individual powercalc sensors. For example you can get the total usage of your kitchen this way or your full house usage. Also supports sub groups and more.</p>"},{"location":"sensor-types/#daily-fixed-energy","title":"Daily fixed energy","text":"<p>Use this for non smart devices which are not managed by HA, and which you known the daily kWh consumption of. This allows you to create an energy sensor for that which you can add to the energy dashboard</p>"},{"location":"sensor-types/#energy-from-real-power-sensor","title":"Energy from real power sensor","text":"<p>Use this when you have an existing power sensor in your installation, which you want to create energy sensor (and optionally utility meters) for. This also makes it possible to add the power sensor to a powercalc group.</p>"},{"location":"sensor-types/#energy-sensors-and-utility-meters","title":"Energy sensors and utility meters","text":"<p>When setting up power sensors using the above methods Powercalc can automatically create an energy sensor (kWh) and optionally utility meters (sensors which cycle each hour, week, month). The can be toggled in the GUI or use the YAML options <code>create_energy_sensor</code> and <code>create_utility_meters</code> globally or per sensor.</p>"},{"location":"sensor-types/daily-energy/","title":"Daily fixed energy","text":"<p>Sometimes you want to keep track of energy usage of individual devices which are not managed by Home Assistant. When you know the energy consumption in kWh or W powercalc can make it possible to create an energy sensor (which can also be used in the energy dashboard). This can be helpful for devices which are always on and have a relatively fixed power draw. For example an IP camera, intercom, Google nest, Alexa, network switches etc.</p>"},{"location":"sensor-types/daily-energy/#configuration-options","title":"Configuration options","text":"Name Type Requirement Default Description value float Required Value either in watts or kWh. Can also be a template unit_of_measurement string Optional kWh <code>kWh</code> or <code>W</code> on_time period Optional 24:00:00 How long the device is on per day. Only applies when <code>unit_of_measurement</code> is set to <code>W</code>. Format <code>HH:MM:SS</code> update_frequency integer Optional 1800 Seconds between each increase in kWh"},{"location":"sensor-types/daily-energy/#examples","title":"Examples","text":"<p>This will add 0.05 kWh per day to the energy sensor called \"IP camera upstairs\"</p> <pre><code>powercalc:\n  sensors:\n    - name: IP camera upstairs\n      daily_fixed_energy:\n        value: 0.05\n</code></pre> <p>Or define in watts, with an optional on time (which is 24 hour a day by default).</p> <pre><code>powercalc:\n  sensors:\n    - name: Intercom\n      daily_fixed_energy:\n        value: 21\n        unit_of_measurement: W\n        on_time: 12:00:00\n</code></pre> <p>This will simulate the device using 21 watts for 12 hours a day. The energy sensor will increase by 0.252 kWh a day.</p> <p>Note</p> <p>When you use <code>on_time</code> no power sensor (W) will be created, but only an energy sensor (kWh) will be available.</p>"},{"location":"sensor-types/daily-energy/#actions","title":"Actions","text":""},{"location":"sensor-types/daily-energy/#resetting-sensor","title":"Resetting sensor","text":"<p>To reset the energy sensor to zero use the <code>powercalc.reset_energy</code> action.</p> <pre><code>action: powercalc.reset_energy\ntarget:\n  entity_id: sensor.my_energy\n</code></pre>"},{"location":"sensor-types/daily-energy/#increasing-sensor","title":"Increasing sensor","text":"<p>To increase the sensor with a given value use the <code>powercalc.increase_daily_energy</code> action.</p>"},{"location":"sensor-types/energy-sensor/","title":"Energy sensors","text":"<p>An energy sensor provides a measurement in kWh, which is a measurement of power usage over time. For example when you have a device of 1000 Watt running for 1 hour you have used 1000 Wh which equals to 1 kWh. Powercalc can automatically create energy sensors for your virtual power meters. It uses the Riemann Sum helper for that.</p> <p>By default energy sensors are created for all your powercalc power meters, but if you don't like that you can disable that with the <code>create_energy_sensors</code> option.</p> <pre><code>powercalc:\n  create_energy_sensors: false\n</code></pre> <p>You can also set this option per sensor in YAML or when you use the GUI you can toggle this in the options.</p>"},{"location":"sensor-types/energy-sensor/#resetting-energy-sensor","title":"Resetting energy sensor","text":"<p>Powercalc provides an action <code>powercalc.reset_energy</code> which you can call to reset energy sensors to 0 kWh. You can call this action from the GUI (<code>Developer tools</code> -&gt; <code>Actions</code>) or use this in automations.</p>"},{"location":"sensor-types/energy-sensor/#calibrating-energy-sensor","title":"Calibrating energy sensor","text":"<p>Powercalc provides an action <code>powercalc.calibrate_energy</code> which you can call to set an energy sensor to a forced new value. This can be useful if somehow the energy sensor has an erroneous value.</p> <p>You can call this action from the GUI (<code>Developer tools</code> -&gt; <code>Actions</code>).</p>"},{"location":"sensor-types/real-power-sensor/","title":"Real power sensor","text":"<p>Powercalc also provides possibilities to create energy sensors (and optionally utility meters) for existing power sensors in your installation. You could also create them with the built-in helpers HA provides, but Powercalc makes it even more easy and you can also includes existing power sensors in Powercalc groups this way. The energy sensors can be added to the energy dashboard.</p> <p>You can create this either with the YAML or GUI.</p>"},{"location":"sensor-types/real-power-sensor/#gui","title":"GUI","text":"<p>Just click this button to start the configuration flow:</p> <p></p> <p>Select <code>Energy from real power sensor</code> and follow the instructions.</p>"},{"location":"sensor-types/real-power-sensor/#yaml","title":"YAML","text":"<p>In the yaml configuration you can add the following configuration to use an existing power sensor and let powercalc create the energy sensors and utility meters for it:</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: light.toilet\n      power_sensor_id: sensor.toilet_light_power\n      force_energy_sensor_creation: true # optional\n</code></pre> <p>This also enables you to combine virtual power sensors (created with powercalc) and existing power sensors in your HA installation into a YAML group. Without this configuration option power_sensor_id that would not be possible.</p> <p>When using <code>force_energy_sensor_creation</code> you need to provide either a source entity (<code>entity_id</code>) or a <code>name</code> for the energy sensor. If you don't provide this Powercalc has no way to determine how the energy sensor should be named.</p> <p>Note</p> <p>If you don't define <code>force_energy_sensor_creation</code> or you set it to <code>false</code> an energy sensor will not be created if the device already has an energy sensor. This can be a problem if you want to create an energy sensor for an MQTT device with multiple energy and power sensors already in it.</p>"},{"location":"sensor-types/utility-meter/","title":"Utility meters","text":"<p>The energy sensors created by the component will keep increasing the total kWh, and never reset. When you want to know the energy consumed the last 24 hours, or last month you can use the utility_meter component of Home Assistant. Powercalc allows you to automatically create utility meters for all your powercalc sensors with a single line of configuration.</p> <p>Toggling utility meter creation on/off can also be done when creating power sensors with the GUI on a per sensor basis.</p> <p>To create utility meters for all powercalc sensors globally add the following configuration to <code>configuration.yaml</code>.</p> <pre><code>powercalc:\n  create_utility_meters: true\n</code></pre> <p>By default utility meters are created for <code>daily</code>, <code>weekly</code>, <code>monthly</code> cycles. You can change this behaviour with the <code>utility_meter_types</code> configuration option.</p> <pre><code>powercalc:\n  create_utility_meters: true\n  utility_meter_types:\n    - daily\n    - yearly\n</code></pre> <p>Note</p> <p>A note on naming. The utility meters have the same name as your energy sensor, but are extended by the meter cycle. Assume you have a light <code>light.floorlamp_livingroom</code>, than you should have the following sensors created:</p> <ul> <li><code>sensor.floorlamp_livingroom_power</code></li> <li><code>sensor.floorlamp_livingroom_energy</code></li> <li><code>sensor.floorlamp_livingroom_energy_daily</code></li> <li><code>sensor.floorlamp_livingroom_energy_weekly</code></li> <li><code>sensor.floorlamp_livingroom_energy_monthly</code></li> </ul>"},{"location":"sensor-types/utility-meter/#tariffs","title":"Tariffs","text":"<p>When your utility company uses different tariffs depending on the time of the day, i.e. <code>peak</code>, <code>offpeak</code> you can create multiple utility meters for that use case. Two <code>utility_meter</code> entities will be created and one <code>select</code> entity which allows you to select the active tariff. You can create an automation to set the active tariff depending on time of the day or some other logic, see https://www.home-assistant.io/integrations/utility_meter/#advanced-configuration</p> <p>Use the <code>utility_meter_tariffs</code> option to set the tariffs. In the example below we do it globally, but you can also configure per sensor.</p> <pre><code>powercalc:\n  utility_meter_tariffs:\n    - peak\n    - offpeak\n</code></pre> <p>If you also would like to create an overall utility meter you can add <code>general</code> to the list of tariffs. This will also create a \"normal\" utility meter, which is also created when you omit the <code>utility_meter_tariffs</code> option.</p> <pre><code>powercalc:\n  utility_meter_tariffs:\n    - general\n    - peak\n    - offpeak\n</code></pre>"},{"location":"sensor-types/virtual-power-library/","title":"Virtual power sensor (library)","text":"<p>Powercalc has a huge library of power profiles which can be directly used without the need of extensive configuration. For all supported devices please see the supported models listing.</p> <p>Most of the time Powercalc will find compatible devices in your system and provide you with a discovery flow which you only need to accept.</p> <p>When your device is not found or you want to reuse or force a certain profile for another device you can select the profile manually.</p> <p>Follow the instruction below depending on your preferred configuration method GUI or YAML.</p>"},{"location":"sensor-types/virtual-power-library/#gui","title":"GUI","text":"<p>Just click the button to directly add a powercalc sensor:</p> <p></p> <p>Select <code>Virtual power (library)</code> and follow the instructions.</p> <p>To change the profile of an existing sensor, go to the sensor's settings and click on <code>Library options</code>.</p>"},{"location":"sensor-types/virtual-power-library/#yaml","title":"YAML","text":"<p>Just specify the correct manufacturer and model.</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: light.my_light\n      manufacturer: signify\n      model: LCT010\n</code></pre>"},{"location":"sensor-types/virtual-power-library/#sub-profiles","title":"Sub profiles","text":"<p>Some power profiles provide multiple sub profiles.</p> <p>Examples of that are:</p> <ul> <li>Led strips of multiple lengths</li> <li>Lights with a night vision / infrared mode</li> <li>Lights which have a separate up and down light</li> <li>Camera's with a night vision</li> </ul> <p>Most power profiles can automatically switch to the correct sub profile depending on some entity and/or attribute state, but for some of them Powercalc can not known and you must select on manually. This applies for example to extensible led strips of different lengths.</p> <p>In the GUI flow this will be asked in the wizard as shown in screenshot below.</p> <p></p> <p>In YAML you'll need to append the sub profile to the model, separated by a slash: For example to select sub profile <code>length_9</code> of LIFX Z model.</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: light.my_light\n      manufacturer: lifx\n      model: LIFX Z/length_9\n</code></pre> <p>Powercalc also provides an action <code>powercalc.switch_sub_profile</code> which you can call to switch to another sub profile while HA is running.</p>"},{"location":"sensor-types/virtual-power-manual/","title":"Virtual power sensor (manual)","text":"<p>To manually add virtual power sensors for your devices you can use the GUI or add some configuration to <code>configuration.yaml</code>.</p> <p>Powercalc offers various calculation strategies that can be used to establish a new virtual power sensor. Each method is suitable for specific use cases. To learn about all options please see strategies.</p>"},{"location":"sensor-types/virtual-power-manual/#gui","title":"GUI","text":"<p>You can create new virtual power sensors with the GUI.</p> <p>Just click the button to directly add a powercalc sensor:</p> <p></p> <p>When this is not working.</p> <ul> <li>Go to <code>Settings</code> -&gt; <code>Devices &amp; Services</code></li> <li>Click <code>Add integration</code></li> <li>Search and click <code>Powercalc</code></li> </ul> <p>Select <code>Virtual power (manual)</code> and follow the instructions.</p> <p>After you have walked through the wizard the new powercalc sensor must be created and appear in the list. When you click on it you can see the entities which are created. Some options can be changed afterwards, just click <code>Configure</code></p> <p>Important</p> <p>You can omit source entity when you want to setup a calculation based on for example a template. In this case you MUST provide a name thought. So either source entity or name are mandatory to setup a virtual power sensor.</p>"},{"location":"sensor-types/virtual-power-manual/#yaml","title":"YAML","text":"<p>To create a power sensor with YAML you'll have to add a new entry under <code>powercalc-&gt;sensors</code> line in <code>configuration.yaml</code>.</p> <p>Most basic example:</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: light.my_light\n      fixed:\n        power: 20\n</code></pre> <p>For all the possible options see the strategy sections as linked above, sensor configuration and the rest of the Powercalc documentation.</p> <p>Adding a sensor using the YAML method will not add the Powercalc integration page. Only entities created with the GUI will appear there. The sensor will functionally be the same, and you can find it in the global entities list.</p> <p>Important</p> <p>After changing the configuration you'll need to restart HA to get your power sensors to appear.</p>"},{"location":"sensor-types/virtual-power-manual/#splitting-up-configuration","title":"Splitting up configuration","text":"<p>Alternatively you could move all powercalc configuration and sensors to a separate YAML file to prevent getting one massive <code>configuration.yaml</code> and keep things maintainable. To do so add the following line to <code>configuration.yaml</code>:</p> <pre><code>powercalc: !include includes/powercalc.yaml\n</code></pre> <p>Now in <code>powercalc.yaml</code> add all the global configuration and sensors. You need to omit <code>powercalc:</code> in this case.</p> <pre><code>sensors:\n  - entity_id: light.my_light\n    fixed:\n      power: 20\n  - entity_id: light.my_light2\n    fixed:\n      power: 40\n</code></pre> <p>A third way would be to use the packages system which Home Assistant provides.</p>"},{"location":"sensor-types/group/","title":"Groups","text":"<p>Powercalc provides several options to group individual power sensors into a single one which sums the total. This can be very useful to get a glance about the consumption of all your lights together for example.</p> <p>There are several group types available:</p> <ul> <li>Custom group</li> </ul> <p>Create a group with a custom name and add individual power and energy sensors to it. You can also nest groups to create a hierarchy.</p> <ul> <li>Domain group</li> </ul> <p>Create a group for all the power entities of a given domain. For example all lights or media players.</p> <ul> <li>Subtract group</li> </ul> <p>Use this group to subtract the power of one or more entities from another entity.</p> <ul> <li>Tracked/Untracked group</li> </ul> <p>This group is used to get a sum of all tracked or untracked power sensors.</p> <ul> <li>Standby group</li> </ul> <p>This group is created by default and sum all power when devices are in standby mode.</p>"},{"location":"sensor-types/group/custom/","title":"Custom group","text":"<p>Create a group with a custom name and add individual power and energy sensors to it.</p>"},{"location":"sensor-types/group/custom/#create-group-with-gui","title":"Create group with GUI","text":"<p>You can create a new group with the GUI using this button.</p> <p></p> <p>When this is not working.</p> <ul> <li>Go to <code>Settings</code> -&gt; <code>Devices &amp; Services</code></li> <li>Click <code>Add integration</code></li> <li>Search and click <code>Powercalc</code></li> </ul> <p>Select <code>Group</code> -&gt; <code>Custom</code> and follow the instructions.</p> <p>Tip</p> <p>After you have created a group you can directly assign a virtual power sensor to it when creating the power sensor by selecting the group in the <code>Group</code> field. You can also create group directly from the power sensor creation page, by filling in a custom group name in the <code>Group</code> field.</p> <p>Warning</p> <p>Currently sensors registering negative energy values are not supported in groups.</p>"},{"location":"sensor-types/group/custom/#create-group-with-yaml","title":"Create group with YAML","text":"<p>You can combine the <code>entities</code> option and <code>create_group</code> to group individual power sensors into a group.</p> <pre><code>powercalc:\n  sensors:\n    - create_group: All hallway lights\n      entities:\n        - entity_id: light.hallway\n        - entity_id: light.living_room\n          linear:\n            min_power: 0.5\n            max_power: 8\n</code></pre> <p>This will create the following entities:</p> <ul> <li>sensor.hallway_power</li> <li>sensor.hallway_energy</li> <li>sensor.living_room_power</li> <li>sensor.living_room_energy</li> <li>sensor.all_hallway_lights_power (group sensor)</li> <li>sensor.all_hallway_lights_energy (group sensor)</li> </ul>"},{"location":"sensor-types/group/custom/#nesting-groups","title":"Nesting groups","text":"<p>You can also nest groups, this makes it possible to add an entity to multiple groups.</p> <pre><code>powercalc:\n  sensors:\n    - create_group: All lights\n      entities:\n        - entity_id: light.a\n        - entity_id: light.b\n        - create_group: Upstairs lights\n          entities:\n            - entity_id: light.c\n            - create_group: Bedroom Bob lights\n              entities:\n                - entity_id: light.d\n</code></pre> <p>Each group will have power sensors created for the following lights:</p> <ul> <li>All lights: <code>light.a</code>, <code>light.b</code>, <code>light.c</code>, <code>light.d</code></li> <li>Upstairs lights: <code>light.c</code>, <code>light.d</code></li> <li>Bedroom Bob lights: <code>light.d</code></li> </ul> <p>Warning</p> <p>a maximum nesting level of 5 groups is allowed!</p>"},{"location":"sensor-types/group/custom/#hide-individual-sensors","title":"Hide individual sensors","text":"<p>To hide individual power sensors, and only have the group sensor available in HA GUI you can use the <code>hide_members</code> option. When you used the GUI to create the group sensor you can use the <code>Hide members</code> toggle.</p>"},{"location":"sensor-types/group/custom/#adding-non-powercalc-sensors","title":"Adding non powercalc sensors","text":"<p>Sometimes you want to add some power and energy sensors to your group which already exist in your HA installation. For example some Zwave/Zigbee plug with built-in power monitoring.</p> <p>In YAML you can use the <code>power_sensor_id</code> and <code>energy_sensor_id</code> options for that. Let's assume your smart plug provides <code>sensor.heater_power</code> and <code>sensor.heater_kwh</code>. We want to add these to the group <code>Living Room</code>.</p> <p>You can use the following configuration:</p> <pre><code>powercalc:\n  sensors:\n    - create_group: Living Room\n      entities:\n        - power_sensor_id: sensor.heater_power\n          energy_sensor_id: sensor.heater_kwh\n        - entity_id: light.hallway #Powercalc sensor\n</code></pre> <p>Note</p> <p>When you don't supply <code>energy_sensor_id</code>, but only <code>power_sensor_id</code> powercalc tries to find a related energy sensor on the same device. When it cannot find one Powercalc will create an energy sensor.</p> <p>If you use the GUI to create the groups you can use <code>Additional power entities</code> and <code>Additional energy entities</code> options.</p> <p></p> <p>Also see Real power sensor</p>"},{"location":"sensor-types/group/custom/#automatically-include-entities","title":"Automatically include entities","text":"<p>Powercalc has some options to automatically include entities in your group matching certain criteria. This can be useful to you don't have to manually specify each and every sensor.</p> <p>See include entities for more information.</p>"},{"location":"sensor-types/group/custom/#force-creating-riemann-sum-sensor","title":"Force creating Riemann sum sensor","text":"<p>By default the group energy sensor created by Powercalc is a simple sum of the energy sensors of the individual entities. When you have <code>create_energy_sensor: false</code> for the individual entities, the group energy sensor will not be created. <code>force_calculate_group_energy</code> can be used to force the creation of a Riemann sum sensor for the group. This will take the group power sensor as the source and integrate it over time.</p> <p>For example:</p> <pre><code>powercalc:\n  sensors:\n    - create_group: all lights\n      create_energy_sensor: true\n      force_calculate_group_energy: true\n      entities:\n        - create_group: living lights\n          create_energy_sensor: false\n          entities:\n            - entity_id: light.tv_lamp\n            - entity_id: light.reading_light\n            - ...\n</code></pre> <p>This way you can still create an energy sensor even when the individual entities don't have one. When you are not interested in the individual energy sensors of each light this could be a good solution.</p> <p>Important</p> <p>Beware that if your group also consists of daily energy sensors the Riemann sum sensor will not be accurate, as it's could be missing the data of this sensor, because it does not always have a power sensor. So you only must use this option when the group power sensor contains all the power data from individual entities.</p>"},{"location":"sensor-types/group/custom/#action-get_group_entities","title":"Action get_group_entities","text":"<p>Powercalc provides an action <code>Powercalc: get group entities</code> to get all entity_id's of group members.</p>"},{"location":"sensor-types/group/domain/","title":"Domain group","text":"<p>Powercalc makes it easy to create a group sensors for all entities of a given domain with the <code>create_domain_groups</code> option, or you can use the GUI, select <code>Group</code> -&gt; <code>Domain group</code>. For example let's assume you want group sensors for all your lights and media players you can use the following configuration.</p> <pre><code>powercalc:\n  create_domain_groups:\n    - light\n    - media_player\n</code></pre> <p>Note</p> <p>This will only include all virtual power sensors created with powercalc, not any other power sensors already available in your HA installation. This is because Powercalc cannot know the source for any given power sensor.</p> <p>You can also utilize this option to create a group to sum all energy sensors of your HA installation. Use <code>all</code> for that.</p> <pre><code>powercalc:\n  create_domain_groups:\n    - all\n</code></pre>"},{"location":"sensor-types/group/include-entities/","title":"Dynamically including entities","text":"<p>Powercalc provides several methods to automatically include a bunch of entities in a group with the <code>include</code> option. In addition to that you can use filters to exclude certain entities.</p> <p>Note</p> <p>Only entities will be included which are in the supported models list (these can be auto configured). You can combine <code>include</code> and <code>entities</code> to extend the group with custom configured entities.</p> <p>Important</p> <p>Powercalc will include any power sensors found in your HA installation matching the include rules. When you don't want that see [Exclude non powercalc sensors]</p> <p>Currently Powercalc will not dynamically reload the group when entities are added or removed from your HA installation. When you created the group using the GUI you can use the <code>Reload</code> button on the integration page for the corresponding config entry. If you used YAML you need to restart Home Assistant fully to reload the group.</p>"},{"location":"sensor-types/group/include-entities/#include","title":"Include","text":""},{"location":"sensor-types/group/include-entities/#area","title":"Area","text":"<pre><code>powercalc:\n  sensors:\n    - create_group: Outdoor\n      include:\n        area: outdoor\n</code></pre> <p>This can also be mixed with the <code>entities</code> option, to add or override entities to the group. i.e.</p> <pre><code>powercalc:\n  sensors:\n    - create_group: Outdoor\n      include:\n        area: outdoor\n      entities:\n        - entity_id: light.frontdoor\n          fixed:\n            power: 100\n</code></pre>"},{"location":"sensor-types/group/include-entities/#group","title":"Group","text":"<p>Includes entities from an existing Home Assistant group or light group)</p> <pre><code>powercalc:\n  sensors:\n    - create_group: Livingroom lights\n      include:\n        group: group.livingroom_lights\n</code></pre>"},{"location":"sensor-types/group/include-entities/#domain","title":"Domain","text":"<pre><code>powercalc:\n  sensors:\n    - create_group: All lights\n      include:\n        domain: light\n</code></pre> <p>You might also filter by multiple domains:</p> <pre><code>powercalc:\n    sensors:\n      - create_group: All lights\n        include:\n          domain:\n            - light\n            - switch\n</code></pre>"},{"location":"sensor-types/group/include-entities/#label","title":"Label","text":"<p>Filters entities by a label.</p> <pre><code>powercalc:\n  sensors:\n    - create_group: All bluetooth proxy\n      include:\n        label: bluetooth_proxy\n</code></pre>"},{"location":"sensor-types/group/include-entities/#wildcard","title":"Wildcard","text":"<p>Match certain entity id's by a wildcard pattern</p> <p><code>*</code> matches any character <code>?</code> matches a single character</p> <p>When you don't supply any of the above wildcard the filter checks for an exact match of the entity_id</p> <pre><code>powercalc:\n  sensors:\n    - create_group: Office spots\n      include:\n        wildcard: light.office_spot_*\n</code></pre>"},{"location":"sensor-types/group/include-entities/#template","title":"Template","text":"<pre><code>powercalc:\n  sensors:\n    - create_group: All indoor lights\n      include:\n        template: {{expand('group.all_indoor_lights')|map(attribute='entity_id')|list}}\n</code></pre> <p>Warning</p> <p>The template option sometimes does not work correctly because of loading order of components in HA which powercalc cannot influence. So it's actually discouraged to use this and should only be used when you have no other options.</p>"},{"location":"sensor-types/group/include-entities/#all","title":"All","text":"<p>Include all powercalc sensors and other power sensors of the HA installation in the group. You can combine that with the filters mentioned below.</p> <pre><code>powercalc:\n  sensors:\n    - create_group: General\n      include:\n        all:\n</code></pre>"},{"location":"sensor-types/group/include-entities/#filters","title":"Filters","text":"<p>Besides the base filters described above which build the base include you can also apply additional filters to further narrow down the list of items. These filters accept the same configuration as described above.</p> <p>For example to include all light entities from area outdoor.</p> <pre><code>powercalc:\n  sensors:\n    - create_group: Outdoor lights\n      include:\n        area: outdoor\n        filter:\n          domain: light\n</code></pre> <p>To exclude sensors based on a label:</p> <pre><code>powercalc:\n  sensors:\n    - create_group: All lights\n      include:\n        domain: light\n        filter:\n          label: excludePowercalc\n</code></pre>"},{"location":"sensor-types/group/include-entities/#andor","title":"AND/OR","text":"<p>You can also chain nested filter using and / or construction:</p> <pre><code>powercalc:\n  sensors:\n    - create_group: Outdoor lights\n      include:\n        area: outdoor\n        filter:\n          or:\n            - domain: light\n            - wildcard: switch.pond\n            - and:\n              - domain: binary_sensor\n              - wildcard: \"*swimming_pool*\"\n</code></pre>"},{"location":"sensor-types/group/include-entities/#exclude-non-powercalc-sensors","title":"Exclude non powercalc sensors","text":"<p>By default all the include options will include any power and/or energy sensor from your system, also power sensors provided by other integrations. When you don't want that behaviour you can set <code>include_non_powercalc_sensors</code> to <code>false</code>.</p> <pre><code>.. code-block:: yaml\n\npowercalc:\n  sensors:\n    - create_group: Outdoor lights\n      include:\n        area: outdoor\n        include_non_powercalc_sensors: false\n</code></pre> <p>You can also set this option globally:</p> <pre><code>.. code-block:: yaml\n\npowercalc:\n  include_non_powercalc_sensors: false\n</code></pre>"},{"location":"sensor-types/group/subtract/","title":"Subtract group","text":"<p>Use this group to subtract the power of one or more entities from another entity.</p> <p>You select a base entity using the <code>entity_id</code> option and then add one or more entities to subtract from the base entity using the <code>subtract_entities</code> option.</p>"},{"location":"sensor-types/group/subtract/#create-group-with-gui","title":"Create group with GUI","text":"<p>You can create a new group with the GUI using this button.</p> <p></p> <p>When this is not working.</p> <ul> <li>Go to <code>Settings</code> -&gt; <code>Devices &amp; Services</code></li> <li>Click <code>Add integration</code></li> <li>Search and click <code>Powercalc</code></li> </ul> <p>Select <code>Group</code> -&gt; <code>Subtract</code> and follow the instructions.</p>"},{"location":"sensor-types/group/subtract/#create-group-with-yaml","title":"Create group with YAML","text":"<pre><code>powercalc:\n  sensors:\n    - create_group: Subtract\n      group_type: subtract\n      entity_id: sensor.a\n      subtract_entities:\n        - sensor.b\n        - sensor.c\n</code></pre>"},{"location":"sensor-types/group/tracked-untracked/","title":"Tracked/untracked group","text":"<p>The <code>Tracked/Untracked</code> group is a special group designed to monitor the total power consumption of individual power sensors, referred to as the tracked group.</p> <p>You can also specify a <code>main_power_sensor</code>, which will be used to calculate the <code>untracked</code> consumption. This is determined by subtracting the power consumption of the tracked group from the total power consumption.</p> <p>After configuration you'll end up with two additional sensors:</p> <ul> <li><code>sensor.tracked_power</code></li> <li><code>sensor.untracked_power</code> (only when <code>main_power_sensor</code> is specified)</li> </ul> <p>Additionally energy sensors and utility meters can be created for the tracked and untracked group. Just toggle these options in the configuration screen.</p>"},{"location":"sensor-types/group/tracked-untracked/#create-group-with-gui","title":"Create group with GUI","text":"<p>You can create the group with the GUI using this button.</p> <p></p> <p>When this is not working.</p> <ul> <li>Go to <code>Settings</code> -&gt; <code>Devices &amp; Services</code></li> <li>Click <code>Add integration</code></li> <li>Search and click <code>Powercalc</code></li> </ul> <p>Select <code>Group</code> -&gt; <code>Tracked/Untracked</code> and follow the instructions.</p> <p>Note</p> <p>Powercalc will only allow a single instance of this group in your installation</p>"},{"location":"sensor-types/group/tracked-untracked/#auto-mode","title":"Auto mode","text":"<p>The <code>Tracked/Untracked</code> group can be configured in <code>auto</code> mode. This will try to automatically add all power sensors to the tracked group from you HA instance.</p> <ul> <li>All enabled power sensors with a <code>device_class</code> of <code>power</code> will be added to the tracked group.</li> <li>Excluding powercalc groups and the <code>main_power_sensor</code> if specified.</li> </ul> <p>Whenever a new power sensor is added or removed to your HA instance, the tracked group will update accordingly.</p> <p>If you prefer more granular control, you can disable auto mode and manually manage the sensors in the tracked group. During configuration, the list of sensors will initially match the auto mode setup, but you\u2019ll be able to modify it as needed.</p> <p>Note</p> <p>In manual mode, you must update the group manually whenever power sensors are added or removed from your system.</p>"},{"location":"strategies/","title":"Virtual power strategies","text":"<p>Powercalc provides a lot of calculation methods for your virtual power sensors. They are called strategies. Each strategy is suitable for another use case. They are explained below. Click on the heading to go to the specific section for more information and configuration examples.</p>"},{"location":"strategies/#fixed","title":"Fixed","text":"<p>Suitable when your device has a fixed amount of power when it's turned on. Can also set a power value per state and use templates.</p>"},{"location":"strategies/#linear","title":"Linear","text":"<p>Use this when you want to set power on a linear scale. Useful for dimmable lights or fans which have different speeds.</p>"},{"location":"strategies/#lut","title":"LUT","text":"<p>Use a Lookup table to map a given light brighness and color to a power value in Watt. Most of powercalc built-in profiles use this. You'll need to use the measure utility to create these LUT files.</p>"},{"location":"strategies/#multi-switch","title":"Multi Switch","text":"<p>Use this when you have a device with multiple switches and you want to calculate the power usage based on the on/off state of each switch.</p>"},{"location":"strategies/#playbook","title":"Playbook","text":"<p>This can be used to record the power usage of a device over time and playback that recording. Could be used for example to for programs of your washing machine.</p>"},{"location":"strategies/#wled","title":"WLED","text":"<p>Used for led strips controlled by WLED firmware. WLED integration provides estimated current. Powercalc will create power sensors accordingly.</p>"},{"location":"strategies/#composite","title":"Composite","text":"<p>Combine different strategies.</p>"},{"location":"strategies/composite/","title":"Composite","text":"<p>The composite strategy allows you to create power sensor which contains of multiple strategies. For each strategy you can setup conditions which indicate when the strategy should be applied. So for example you could use the <code>fixed</code> strategy when a certain condition applies, and the <code>linear</code> when another condition applies. For the conditions the same engine is used as in HA automations and scripts. See https://www.home-assistant.io/docs/scripts/conditions/. All conditions are supported, except for the <code>time</code> and <code>trigger</code> condition.</p> <p>Currently this is a YAML only feature</p>"},{"location":"strategies/composite/#modes","title":"Modes","text":"<p>The composite strategy supports the following modes:</p> <ul> <li><code>stop_at_first</code>: The first strategy that matches the condition will be used. This is the default mode.</li> <li><code>sum_all</code>: All strategies that match the condition will be used and the power will be summed.</li> </ul>"},{"location":"strategies/composite/#usage","title":"Usage","text":"<p>Let's start with a simple example:</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: switch.heater\n      composite:  # This indicates the composite strategy is used\n        - condition:\n            condition: state\n            entity_id: select.heater_mode\n            state: high\n          fixed:\n            power: 1000\n        - fixed:\n            power: 500\n</code></pre> <p>This will create a power sensor <code>sensor.heater_power</code>. Whenever the <code>select.heater_mode</code> is high the power sensor will be 1000 and in all other cases 500.</p> <p>Note</p> <p>Strategies will be checked in the order in which they were registered. Until the condition matches.</p> <p>You can mix/match strategies and also use composed conditions using <code>OR</code> and <code>AND</code>. For example:</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: light.test\n      composite:\n        # First strategy (fixed) using nested AND and OR conditions\n        - condition:\n            condition: and\n            conditions:\n              - condition: state\n                entity_id: binary_sensor.test\n                state: on\n              - condition: or\n                conditions:\n                  - condition: numeric_state\n                    entity_id: sensor.test\n                    above: 20\n                    below: 40\n                  - condition: template\n                    value_template: \"{{ is_state('sensor.test2', 'test') }}\"\n          fixed:\n            power: 10\n        # Second strategy (linear)\n        - condition:\n            condition: state\n            entity_id: binary_sensor.test\n            state: off\n          linear:\n            min_power: 20\n            max_power: 40\n</code></pre> <p>When no condition matches for any strategy the power sensor will become <code>unavailable</code> or when the <code>light.test</code> is OFF powercalc will look at the <code>standby_power</code> You can omit <code>condition</code> on the last register strategy so that will always be used as a fallback.</p> <p>Warning</p> <p>Don't omit <code>condition</code> field on any strategy other than the last as that will cause the strategy chain to stop at that one.</p>"},{"location":"strategies/composite/#sum-all-mode","title":"Sum all mode","text":"<p>When using the <code>sum_all</code> mode all strategies that match the condition will be used and the power will be summed.</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: humidifier.test\n      composite:\n        mode: sum_all\n        strategies:\n          - condition:\n              condition: state\n              entity_id: input_boolean.motor1\n              state: on\n            fixed:\n              power: 1000\n          - fixed:\n              power: 500\n</code></pre> <p>In this example the power sensor will be 1500 when <code>input_boolean.motor1</code> is on and 500 when it is off.</p> <p>Note</p> <p>When using the <code>sum_all</code> mode the power sensor will become <code>0</code> when no strategy matches the condition.</p>"},{"location":"strategies/composite/#usage-in-library-profiles","title":"Usage in library profiles","text":"<p>You can also use the composite strategy in library profiles. For example:</p> <pre><code>{\n  \"calculation_strategy\": \"composite\",\n  \"composite_config\": [\n    {\n      \"condition\": {\n        \"condition\": \"numeric_state\",\n        \"above\": 17\n      },\n      \"fixed\": {\n        \"power\": 0.82\n      }\n    },\n    {\n      \"fixed\": {\n        \"power\": 0.52\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"strategies/fixed/","title":"Fixed","text":"<p>When you have an appliance which only can be set on and off you can use this mode. You need to supply a single watt value in the configuration which will be used when the device is ON Also we provide an option to define power values for certain entity states.</p> <p>You can setup sensors both with YAML or GUI. When you use the GUI select <code>fixed</code> in the calculation_strategy dropdown.</p>"},{"location":"strategies/fixed/#configuration-options","title":"Configuration options","text":"Name Type Requirement Description power float Optional Power usage when the appliance is turned on (in watt). Can also be a template states_power dict Optional Power usage per entity state. Values can also be a template <p>Simplest example</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: light.nondimmabled_bulb\n      fixed:\n        power: 20\n</code></pre> <p>Using a template for the power value</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: light.bathroom\n      fixed:\n        power: \"{{states('input_number.bathroom_watts')}}\"\n</code></pre> <p>When you don't have a source entity or helper (ex. <code>input_boolean</code>) to bind on and you just want the power sensor to reflect the template value you can use <code>sensor.dummy</code> as the entity_id</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: sensor.dummy\n      name: Bathroom lights\n      fixed:\n        power: \"{{states('input_number.bathroom_watts')}}\"\n</code></pre> <p>Example with standby power</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: switch.test\n      fixed:\n        power: 5\n      standby_power: 0.5\n</code></pre>"},{"location":"strategies/fixed/#power-per-state","title":"Power per state","text":"<p>The <code>states_power</code> setting allows you to specify a power per entity state. This can be useful for example on Sonos devices which have a different power consumption in different states.</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: media_player.sonos_living\n      fixed:\n        states_power:\n          playing: 8.3\n          paused: 2.25\n          idle: 1.5\n</code></pre> <p>Warning</p> <p>Some states you cannot use as they are considered \"off\" for powercalc. In this case you'll need to use <code>standby_power</code>. The states which this applies to are <code>off</code>, <code>not_home</code>, <code>standby</code> and <code>unavailable</code>.</p> <p>You can also use state attributes. Use the <code>|</code> delimiter to seperate the attribute and value. Here is en example:</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: media_player.sonos_living\n      fixed:\n        power: 12\n        states_power:\n          media_content_id|Spotify: 5\n          media_content_id|Youtube: 10\n</code></pre> <p>When no match is found in <code>states_power</code> lookup than the configured <code>power</code> will be considered.</p>"},{"location":"strategies/linear/","title":"Linear","text":"<p>Supported domains: <code>light</code>, <code>fan</code>, <code>media_player</code></p> <p>The linear mode can be used for dimmable devices which don't have a lookup table available. You need to supply the min and max power draw yourself, by either looking at the datasheet or measuring yourself with a smart plug / power meter. Power consumpion is calculated by ratio. So when you have your fan running at 50% speed and define watt range 2 - 6, than the estimated consumption will be 4 watt.</p> <p>You can setup sensors both with YAML or GUI. When you use the GUI select <code>linear</code> in the calculation_strategy dropdown.</p>"},{"location":"strategies/linear/#configuration-options","title":"Configuration options","text":"Name Type Requirement Description attribute string Optional State attribute to use for the linear range. When not supplied will be <code>brightness</code> for lights, <code>percentage</code> for fans and <code>volume</code> for media players. min_power float Optional Power usage for lowest brightness level max_power float Optional Power usage for highest brightness level calibrate string Optional Calibration values gamma_curve float Optional Apply a gamma correction, for example 2.8 <p>Example configuration</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: light.livingroom_floorlamp\n      linear:\n        min_power: 0.5\n        max_power: 8\n</code></pre> <p>Note</p> <p>defining only <code>min_power</code> and <code>max_power</code> is only allowed for light and fan entities, when you are using another entity (for example a <code>sensor</code> or <code>input_number</code>) you must use the calibrate mode.</p>"},{"location":"strategies/linear/#advanced-precision-calibration","title":"Advanced precision calibration","text":"<p>With the <code>calibrate</code> option you can supply more than one power value for multiple brightness/percentage levels. This allows for a more accurate estimation because not all lights are straight linear.</p> <p>Also you can use this calibration table for other entities than lights and fans, to supply the state values and matching power values.</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: light.livingroom_floorlamp\n      linear:\n        calibrate:\n          - 1 -&gt; 0.3\n          - 10 -&gt; 1.25\n          - 50 -&gt; 3.50\n          - 100 -&gt; 6.8\n          - 255 -&gt; 15.3\n</code></pre> <p>When setting up with the GUI you'll need to supply following format:</p> <pre><code>1: 0.3\n10: 1.25\n50: 3.50\n100: 6.8\n255: 15.3\n</code></pre> <p>Note</p> <p>For lights the supplied values must be in brightness range 1-255, when you select 1 in lovelace UI slider this is actually brightness level 3. For fan speeds the range is 1-100 (percentage)</p> <p>Configuration with a sensor (<code>sensor.heater_modulation</code>) which supplies a percentage value (1-100):</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: sensor.heater_modulation\n      name: Heater\n      linear:\n        calibrate:\n          - 1 -&gt; 200\n          - 100 -&gt; 1650\n</code></pre> <p>You could also use this to setup a power profile for your robot vacuum cleaner, which only consumes power when it is docked into the charching port. You need to use this in conjunction with the <code>calculation_enabled_condition</code> to only activate the power calculation when the device is docked.</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: vacuum.my_robot_cleaner\n      calculation_enabled_condition: \"{{ is_state('vacuum.my_robot_cleaner', 'docked') }}\"\n      linear:\n        attribute: battery_level\n        calibrate:\n          - 1 -&gt; 20\n          - 79 -&gt; 20\n          - 80 -&gt; 15\n          - 99 -&gt; 8\n          - 100 -&gt; 1.5\n</code></pre>"},{"location":"strategies/lut/","title":"LUT","text":"<p>Supported domain: <code>light</code></p> <p>This is the most accurate mode. For a lot of light models measurements are taken using smart plugs. All this data is saved into CSV files. When you have the LUT mode activated the current brightness/hue/saturation of the light will be checked and closest matching line will be looked up in the CSV.</p> <p>There are two possibilities to add virtual power sensors using LUT mode:</p> <ol> <li>Predefined light measurements: The component ships with predefined light measurements for some light models. Also see supported models.</li> <li>Custom light measurements: It is possible to define your own custom light models. See LUT file structure for details on file and directory structure.</li> </ol> <p>These LUT files are created using the measurement tool Powercalc provides. When you are interested in taking measurements yourself and contribute to the profile library yourself see measure.</p> <p>You can setup sensors both with YAML or GUI.</p>"},{"location":"strategies/lut/#gui","title":"GUI","text":"<p>With the GUI select <code>Virtual power (library)</code> in the first step. Powercalc should automatically detect the correct manufacturer and model from the device information known in HA. You can force another manufacturer / model by unchecking the <code>Confirm model</code> checkbox, in the next steps you'll be asked to select the manufacturer and model.</p>"},{"location":"strategies/lut/#yaml","title":"YAML","text":"<p>For most lights the device information in HA will detect the manufacturer and model correctly, so you only need to supply the <code>entity_id</code>.</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: light.livingroom_floorlamp\n</code></pre> <p>When the correct manufacturer and model could somehow not be discovered from HA, you can supply these manually. You can also use this option to force using a certain LUT.</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: light.livingroom_floorlamp\n      manufacturer: signify\n      model: LCT010\n</code></pre> <p>Some light models (currently LIFX brand) require you to refer a so called \"sub profile\" directory, because they have different power charasteristics based on some information not known to HA. For example LIFX BR30 Night Vision light has some infrared mode which can be set in the LIFX app. To load the LUT file for a infrared setting of 25 you can use the following configuration. You will need to lookup the available sub LUT's in the powercalc data directory.</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: light.lifx_nighvision\n      manufacturer: lifx\n      model: LIFX BR30 Night Vision/infrared_25\n</code></pre>"},{"location":"strategies/multi-switch/","title":"Multi Switch","text":"<p> 1.14 or higher</p> <p>The multi switch strategy allows you to combine the self usage of multiple switches into a single entity. This can be used for example to make a profile for Tp-Link HS300 power strip.</p> <p>You can setup sensors both with YAML or GUI. When you use the GUI select <code>multi_switch</code> in the calculation_strategy dropdown.</p>"},{"location":"strategies/multi-switch/#configuration-options","title":"Configuration options","text":"Name Type Requirement Default Description entities list Required Provide a list of the individual switch entities power decimal Required Power for one outlet when it is switched on power_off decimal Required Power for one outlet when it is switched off <pre><code>powercalc:\n  sensors:\n    - name: \"My outlet self usage\"\n      multi_switch:\n        entities:\n          - switch.outlet_1\n          - switch.outlet_2\n          - switch.outlet_3\n        power_off: 0.25\n        power: 0.5\n</code></pre> <p>In this example, when all the switches are turned on, the power usage will be 0.5W * 3 = 1.5W When only <code>switch.outlet_1</code> is turned on, the power usage will be 0.5W + 0.25W + 0.25W = 1W</p>"},{"location":"strategies/playbook/","title":"Playbook","text":"<p>The playbook strategy makes it possible to record power consumption over time and replay that in Home Assistant. This is useful to implement power sensors for program based devices. For example Washing machines, dishwashers. You can generate a playbook with the powercalc measure tool.</p> <p>You can setup sensors both with YAML or GUI. When you use the GUI select <code>playbook</code> in the calculation_strategy dropdown.</p> <p>You must put your playbook in HA config directory and create a subdirectory <code>powercalc/playbooks</code> there. So it could look like this:</p> <pre><code>config\n\u251c\u2500\u2500 powercalc\n\u2502   \u2514\u2500\u2500 playbooks\n\u2502       \u251c\u2500\u2500 playbook1.csv\n\u2502       \u2514\u2500\u2500 playbook2.csv\n</code></pre>"},{"location":"strategies/playbook/#configuration-options","title":"Configuration options","text":"Name Type Requirement Default Description playbooks dict Required Mapping of playbook id's and file paths autostart string Optional key of the playbook which you want to start when HA starts. repeat bool Optional false Set to <code>true</code> when you want to restart the playbook after it completes state_trigger dict Optional Activate a playbook when the entity has a certain state. Mapping of state -&gt; playbook_id <p>Setup a power sensor with playbook support. The example below will create entity <code>sensor.washing_machine_power</code></p> <pre><code>powercalc:\n  sensors:\n    - entity_id: switch.washing_machine\n      playbook:\n        playbooks:\n          program1: program1.csv\n          program2: program2.csv\n</code></pre> <p>this will also add the powercalc sensor to your washing machine device.</p> <p>or when you don't have an entity to bind to, just use dummy and define a name.</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: sensor.dummy\n      name: Washing machine\n      playbook:\n        playbooks:\n          ...\n</code></pre> <p>Example using <code>autostart</code> and <code>repeat</code> options:</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: sensor.dummy\n      name: Refrigerator\n      playbook:\n        playbooks:\n          playbook: refrigerator.csv\n      autostart: playbook\n      repeat: true\n</code></pre>"},{"location":"strategies/playbook/#active-playbook-based-on-state-trigger","title":"Active playbook based on state trigger","text":"<p>To activate a playbook based on a state trigger you can use the <code>state_trigger</code> option. This option is a mapping of state -&gt; playbook_id. When the entity enters the state the playbook will be activated.</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: sensor.sonos\n      name: Sonos\n      playbook:\n        playbooks:\n          idle: sonos_play/idle.csv\n          paused: sonos_play/paused.csv\n        state_trigger:\n          idle: idle\n          paused: paused\n</code></pre>"},{"location":"strategies/playbook/#manually-executing-the-playbook","title":"Manually executing the playbook","text":"<p>To start executing a playbook you'll have to utilize HA automations. Powercalc provides two actions which let's you control the playbook execution. <code>activate_playbook</code> and <code>stop_playbook</code>. For example to start the playbook when your washing machine enters a specific program use an automation similar as below.</p> <pre><code>description: \"Activate powercalc playbook when Washing machine starts program\"\nmode: single\ntrigger:\n  - platform: state\n    entity_id:\n      - sensor.washing_machine_job_state\n    to: program1\ncondition: []\naction:\n  - action: powercalc.activate_playbook\n    data:\n      playbook_id: program1\n    target:\n      entity_id: sensor.waching_machine_power\n</code></pre>"},{"location":"strategies/playbook/#playbook-structure","title":"Playbook structure","text":"<p>A playbook file must be a CSV file with 2 columns.  - elapsed time in seconds  - power value in W</p> <pre><code>0.5,70\n2,90\n4,25.5\n</code></pre> <p>When running this playbook the power sensor state will go to 70W after 0.5 seconds, 90W after 2 seconds and 25.5W after 4 seconds. All these timing are relative to the start of the playbook. So when the playbook starts at 18:00:00 the final step will be executed at 18:00:04</p>"},{"location":"strategies/wled/","title":"WLED","text":"<p>Supported domains: <code>light</code></p> <p>You can use the manual WLED strategy for light strips which are controlled by WLED. WLED calculates estimated current based on brightness levels and the microcontroller (ESP) used. Powercalc asks to input the voltage on which the lightstrip is running and optionally a power factor. Based on these factors, the wattage is calculated.</p> <p>Important</p> <p>The brightness limiter must be turned on in WLED for this to work! Otherwise WLED will not provide an estimated current.</p> <p>You can setup sensors both with YAML or GUI. When you use the GUI, select the <code>Virtual power (manual)</code> sensor type, and <code>wled</code> in the \"Calculation strategy\" dropdown. If you have multiple segments, select any of them as the source entity; selecting a helper group with all segments will cause a failure to find the current sensor, even if entity IDs match perfectly.</p>"},{"location":"strategies/wled/#configuration-options","title":"Configuration options","text":"Name Type Requirement Default Description voltage float Required Voltage for the lightstrip power_factor float Optional 0.9 Power factor, between 0.1 and 1.0 <p>Example</p> <pre><code>powercalc:\n  sensors:\n    - entity_id: light.wled_lightstrip\n      wled:\n        voltage: 5\n</code></pre>"},{"location":"troubleshooting/data-correction/","title":"Data correction","text":""},{"location":"troubleshooting/data-correction/#group-energy-sensor","title":"Group energy sensor","text":"<p>There might be a sporadic scenario where a group energy sensor spiked to a very high value. See: Issue #2836 Exact cause is unknown yet, but here is a way to correct it.</p> <p>To remedy this, you can correct the energy sensor by following these steps:</p> <ol> <li>Find a number (delta) by which we want to reduce the current measurement. It's easy with use of history graph</li> <li>Find the current value of the affected sensor.</li> <li>Call <code>Powercalc: Calibrate energy sensor</code> action (service) with the value being a result of <code>current_value - delta</code>. You can do it in Developer Tools/Actions in HA.</li> <li>using Developer Tools/Statistics in HA, fix 2 points in long-term statistics: the 1st when the sensor went high, and the 2nd when we fixed it. Likely use 0 (zero) value in both places as replacement.</li> </ol> <p>After these steps, the energy sensor long term statistics should be corrected, and energy dashboard should show correct values.</p> <p>Note</p> <p>There are still other places in the database where those values are stored. those are the <code>statistics_short_term</code> and <code>states</code> tables. These are used for short term history in HA and are not corrected by this procedure. When you really need to you can modify these using SQL. Make sure to stop HA before doing this to prevent data corruption.</p> <p>When you also have a secondary time series DB (like influx or PostgreSQL/Timescale), you also need to correct the values there. Here is an example for TimescaleDB:</p> <pre><code>UPDATE ltss\nSET state = state::NUMERIC - 55.8\nWHERE entity_id = 'sensor.pg_all_lights_energy'\n  AND state NOT IN ('unavailable','unknown')\n  AND time BETWEEN '2024-12-21 15:42:10.842109+00' AND '2024-12-22 09:58:58.562645+00';\n</code></pre>"},{"location":"troubleshooting/debug-logging/","title":"Debug logging","text":"<p>To analyse issues on your installation it might be helpful to enable debug logging.</p> <p>You can enable debug logging by going to the Powercalc integration page. You can use the button below.</p> <p></p> <p>Next click <code>Enable debug logging</code></p>"},{"location":"troubleshooting/debug-logging/#alternative-method","title":"Alternative method","text":"<p>Add the following to configuration.yaml:</p> <pre><code>logger:\n  default: warning\n  logs:\n    custom_components.powercalc: debug\n</code></pre>"},{"location":"troubleshooting/faq/","title":"Frequently asked questions","text":""},{"location":"troubleshooting/faq/#what-is-the-difference-between-power-and-energy","title":"What is the difference between power and energy?","text":"<p>power is measured in Watt (W) and represents the instantaneous power your device is consuming. energy is measured in kWh or Wh and indicates how much power is used over time. When you have a device is 1000 Watt and you leave it one for one whole hour you have used 1000 Wh or 1 kWh. Powercalc also uses this terminology to name your sensors. It creates a <code>_power</code> and <code>_energy</code> sensor by default.</p>"},{"location":"troubleshooting/faq/#why-is-no-power-sensor-appearing-for-my-light","title":"Why is no power sensor appearing for my light?","text":"<ul> <li>Make sure you have <code>powercalc:</code> entry added to your configuration.</li> <li>Check if your light model is in the supported models list)</li> <li>Check the HA logs for errors</li> </ul>"},{"location":"troubleshooting/faq/#my-light-is-in-the-supported-model-list-but-not-discovered-what-can-i-do","title":"My light is in the supported model list but not discovered. What can I do?","text":"<p>Powercalc scans your HA installation for all devices having a manufacturer and model information. It tries to match this information against the model_id and aliases shown in the supported models list. Some integrations return different product codes / model id's for the same light which may cause a mismatch. For example Hue and Zigbee2Mqtt. To have a look at which model was discovered by powercalc you can enable debug logging. Now look for the lines <code>Auto discovered model (manufacturer=xx, model=xx)</code> in the logs, and see if the model id matches. When it does not match something powercalc known an aliases might be added. You can create an issue for that or better yet provide a Pull Request for the changes.</p>"},{"location":"troubleshooting/faq/#i-dont-see-energy-appearing-in-the-energy-dashboard-why-is-that","title":"I don't see energy appearing in the energy dashboard, why is that?","text":"<p>It can take up to an hour for HA to gather statistics for the energy sensor. So when it is not appearing immediately just wait for a bit.</p>"},{"location":"troubleshooting/faq/#how-can-i-setup-an-energy-sensor-for-a-device-which-has-no-entity-in-ha","title":"How can I setup an energy sensor for a device which has no entity in HA?","text":"<p>You can use daily energy for that.</p>"},{"location":"troubleshooting/faq/#my-device-is-not-supported-what-can-i-do","title":"My device is not supported, what can I do?","text":"<p>The built-in power profiles in powercalc are created by taking measurements using a smart plug. These profiles are submitted by the community, and the actual hardware (light, switch, smart speaker) is needed. Powercalc includes a script to automate this process. To run this script you'll need the bulb itself, a smart plug , some technical affinity and some time. See measure for some documentation how to do this.</p> <p>When you can't contribute for whatever reason you can request a new light model on the discussion section. However it is no certainty if and when it will be added.</p> <p>Alternatively you can use the fixed or linear modes for manual configuration to get an approximation.</p>"},{"location":"troubleshooting/faq/#why-does-powercalc-create-additional-power-sensor-for-my-smart-plug","title":"Why does Powercalc create additional power sensor for my smart plug?","text":"<p>Powercalc provides profiles for some smart plugs which don't provide their self usage. Even though their consumption is very small, they will add up to your total consumption in your house. So you'll get a power sensor so you'll know how much the smart plug itself uses. Hence the naming <code>_device_power</code> and <code>_device_energy</code>. When you don't want these in your installation you can remove them by using the exclude_device_types option.</p>"},{"location":"troubleshooting/install-master/","title":"Install master","text":"<p>HACS no longer supports installing from the master branch. If no new version of PowerCalc has been released yet and you need to test the latest functionality, you can update manually by following these steps:</p> <ol> <li>Download the ZIP file from this URL: https://github.com/bramstroker/homeassistant-powercalc/archive/refs/heads/master.zip</li> <li>Extract the contents of the ZIP.</li> <li>Copy the custom_components/powercalc folder from the ZIP into your Home Assistant's config/custom_components/powercalc directory, replacing the existing files.</li> <li>Restart Home Assistant to apply the latest improvements and updates.</li> </ol> <p>Note</p> <p>Don't worry, next time a new version is released and you install it, HACS will update PowerCalc to the latest version, overwritting your temporary modifications.</p>"},{"location":"troubleshooting/yeelight/","title":"Adding Yeelights to Powercalc","text":"<p>Presently, Home Assistant (and the underlying python-yeelight library) does not autodetect the specific model of some Yeelight devices, when adding them via the UI. They may detect the general type (such as 'color'), but not the generation (like 'color2', or actual model number). This prevents us from configuring these devices automatically. To work around this, you must configure those lights manually in some way.</p> <p>If you know how to find your Yeelights' IP addresses, you can do this with Home Assistant directly:</p> <ol> <li>Remove the affected lights from the UI (on the Integrations page)</li> <li>Re-add them to your YAML configuration, according to the format shown here, making sure to add the <code>model</code> option</li> <li>Restart Home Assistant and confirm working</li> <li>(Optional) Remove them from your YAML configuration. If working, they should now persist in Home Assistant after restarts, with correct model retained</li> </ol> <p>You can alternatively configure each of them manually with Powercalc, specifying <code>manufacturer</code> and <code>model</code> options.</p>"}]}